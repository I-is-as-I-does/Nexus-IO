{"version":3,"file":"js/NxIOEdit.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKyD;AAQ1B;AAKsB;AACqB;AACxB;AAIO;AACsB;AACvB;AAIH;AAU5B;AAQF;AACiD;AACnB;AAM7B;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,sDAAK;AACX,QAAQ,wDAAO;AACf;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,yDAAS;AACb,IAAI;AACJ,IAAI,yDAAS;AACb;AACA;AACA,IAAI,yDAAS;AACb,IAAI;AACJ,IAAI,yDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,+DAAa;AACf;AACA;AACA;AACA;AACA,WAAW,4DAAM;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,cAAc,4DAAM;AACpB,mBAAmB,+DAAS;AAC5B;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,aAAa,4DAAM;AACnB;AACA,kBAAkB,4DAAM;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,4DAAM;AACxB;AACA;AACA;AACA,GAAG;AACH;AACA,kBAAkB,4DAAM;AACxB;AACA;AACA;AACA;AACA;AACA,wBAAwB,gEAAgB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,iEAAW;AACf;AACA,IAAI,iEAAW;AACf;AACA,IAAI,iEAAW;AACf;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,uDAAM;AACvB,EAAE,8DAAY;AACd;AACA;AACA;AACA,kBAAkB,yFAAY;AAC9B,qBAAqB,yFAAY;AACjC;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,6DAAS;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,MAAM,8FAAe;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,+DAAa;AACnB,MAAM,8DAAY;AAClB;AACA,GAAG;AACH;AACA;AACA;AACA,gBAAgB,yFAAY;AAC5B,wCAAwC;AACxC,iBAAiB,4DAAM;AACvB,gBAAgB;AAChB;AACA,eAAe,8DAAa;AAC5B,gBAAgB,4DAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qFAAO;AACf;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,UAAU,8FAAe;AACzB,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,qFAAM;AAChB;AACA;AACA,MAAM,6DAAY;AAClB;AACA,IAAI,+DAAa;AACjB;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,aAAa,4DAAM;AACnB,mBAAmB,uDAAM;AACzB,EAAE,8DAAY;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,8FAAe;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,8DAAY;AAClB;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAM;AACtB,iBAAiB,iEAAW;AAC5B;AACA;AACA;AACA;AACA;AACA,WAAW,4DAAM;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,oFAAM;AACd,OAAO;AACP,MAAM;AACN,MAAM,qFAAO;AACb;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,kBAAkB,+DAAW;AAC7B;AACA;AACA;AACA;AACA,cAAc,kEAAY;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,uDAAuD;AACpE,aAAa,gCAAgC;AAC7C,eAAe,kCAAkC;AACjD;AACA;AACA;AACA;AACA;AACA,oBAAoB,4DAAM;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,QAAQ,qFAAO;AACf;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,qFAAM;AACZ;AACA;AACA,IAAI,6DAAY;AAChB;AACA,EAAE,+DAAa;AACf;AACA;AACA;AACA;AACA,YAAY,4DAAM;AACla;AACvB,IAAI;AACJ,UAAU,0DAAS;AACnB,IAAI;AACJ,UAAU,0DAAS;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,0DAAS;AACpB,aAAa,4DAAM;AACnB,cAAc,0DAAS;AACvB;AACA;AACA;AACA;AACA;AACA,oBAAoB,wFAAU;AAC9B;AACA;AACA;AACA,oBAAoB,wFAAU;AAC9B;AACA;AACA;AACA,oBAAoB,uFAAS;AAC7B;AACA;AACA,0BAA0B,sGAAwB;AAClD;AACA;AACA;AACA;AACA,mBAAmB,wFAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,4DAAM;AACnB;AACA;AACA,gBAAgB,iGAAmB;AACnC,gBAAgB,oEAAc;AAC9B,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8FAAU;AACtB;AACA,cAAc,wDAAQ;AACtB;AACA;AACA;AACA;AACA;AACA,uBAAuB,wFAAU;AACjC;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;AACA,IAAI;AACJ,cAAc,wDAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,gEAAe;AACnB;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,MAAM,+DAAa;AACnB,MAAM;AACN;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,eAAe,4DAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,6FAAe;AACrB,MAAM;AACN;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,6DAAY;AAChB;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA,UAAU,6DAAY;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,yFAAY;AAC1B,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,MAAM,6FAAe;AACrB,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,4DAAM;AACpB,cAAc,4DAAM;AACpB,gBAAgB,4DAAM;AACtB;AACA;AACA;AACO;AACP;AACA;AACA,WAAW,2DAAO;AAClB;AACA;AACA,cAAc,wDAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,UAAU,qFAAO;AACjB;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,EAAE,+DAAa;AACf;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,MAAM,wFAAQ;AACd,WAAW,2DAAO;AAClB;AACA,IAAI;AACJ;AACA;AACA;AACA,WAAW,mGAAiB;AAC5B;AACA;AACA;AACA,QAAQ;AACR,eAAe,2DAAO;AACtB;AACA,MAAM,kGAAgB;AACtB;AACA;AACA;AACA;AACA,iBAAiB,4FAAc;AAC/B;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,wDAAQ;AACtB;AACA,EAAE,6DAAW;AACb;AACA;AACA;AACA;AACA;AACO;AACP,SAAS,+DAAS,yBAAyB,iEAAW;AACtD;AACO;AACP,SAAS,+DAAS;AAClB;AACA;AACA,IAAI,iEAAW;AACf;AACA;AACO;AACP,SAAS,+DAAS;AAClB;AACO;AACP,SAAS,+DAAS;AAClB;AACO;AACP;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC39BiF;AACU;AAChB;AAC3E;AAC0D;AACT;AAC1C;AACP,YAAY,4DAAM;AAClB;AACA;AACA;AACA;AACA;AACO;AACP,YAAY,4DAAM;AAClB;AACA;AACA;AACO;AACP,YAAY,4DAAM;AAClB;AACA;AACA;AACA;AACA;AACO;AACP,WAAW,4DAAM;AACjB;AACA,cAAc,4DAAM;AACpB,sBAAsB,gGAAM;AAC5B,EAAE,2GAAiB;AACnB;AACA;AACA;AACA;AACO;AACP,YAAY,4DAAM;AAClB;AACA;AACA;AACA;AACA;AACO;AACP,YAAY,4DAAM;AAClB;AACA;AACA;AACA;AACA;AACO;AACP,WAAW,4DAAM;AACjB,YAAY,+DAAS,CAAC,0DAAU;AAChC;AACA;AACA;AACO;AACP;AACA,MAAM,sFAAW;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7DkD;AACgB;AACc;AACL;AAM5C;AASF;AACmD;AACF;AACT;AAC3B;AACG;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,QAAQ,uDAAO,aAAa;AACxC,YAAY,QAAQ,uDAAO,aAAa;AACxC,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAM;AACtB;AACA;AACA;AACA,cAAc,4DAAM;AACpB,eAAe,+DAAS,CAAC,2DAAW;AACpC;AACA,+BAA+B,EAAE,wDAAY;AAC7C;AACA,gBAAgB,0FAAS;AACzB;AACA;AACA;AACA;AACA,kCAAkC;AAClC,iBAAiB,4DAAM;AACvB;AACA;AACA,IAAI,uDAAU;AACd;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,eAAe,4DAAM;AACrB,gBAAgB,+DAAS,CAAC,sDAAM;AAChC;AACA,IAAI,sDAAS,CAAC,4DAAO;AACrB,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,YAAY,4DAAM;AAClB,aAAa,+DAAS,CAAC,uDAAO;AAC9B;AACA;AACA,GAAG;AACH,aAAa,4DAAM;AACnB;AACA;AACA;AACA;AACA;AACA,YAAY,4DAAM;AAClB;AACA;AACA;AACA,IAAI,uFAAW;AACf;AACA,sBAAsB,yFAAc;AACpC,QAAQ,sDAAS;AACjB,OAAO;AACP;AACA,QAAQ,iFAAM;AACd;AACA,OAAO;AACP;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,YAAY,4DAAM;AAClB,iBAAiB,+DAAS,CAAC,uDAAO;AAClC,EAAE,yDAAS;AACX;AACA;AACA,sBAAsB,wDAAY;AAClC,MAAM,gGAAgB;AACtB;AACA,MAAM,yDAAS;AACf;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,MAAM,yDAAa,sBAAsB,wDAAY;AACrD,IAAI,wDAAS;AACb,IAAI;AACJ,IAAI,wDAAS;AACb;AACA;AACA;AACA;AACA,aAAa,4DAAM;AACnB,kBAAkB,+DAAS,CAAC,wDAAQ;AACpC;AACA;AACA;AACA;AACA,MAAM,qDAAS,YAAY,yDAAa;AACxC,MAAM,yDAAS;AACf;AACA,GAAG;AACH;AACA;AACA;AACA,YAAY,4DAAM;AAClB;AACA;AACA;AACA;AACA,cAAc,4DAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4DAAM;AAClB,EAAE,yEAAkB;AACpB;AACA;AACA;AACA;AACO;AACP,aAAa,4DAAM;AACnB;AACA;AACA;AACO;AACP,YAAY,6FAAM;AAClB;AACA;AACA;AACA,EAAE,oFAAS;AACX;AACA,IAAI,qFAAS;AACb,GAAG;AACH;AACA;AACO;AACP,EAAE,wDAAS;AACX;AACA;AACO;AACP;AACA;AACA;AACA;AACA,IAAI,mEAAY;AAChB;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACnN+E;AACK;AAC5B;AACjB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,kBAAkB,IAAI,sGAA2B,EAAE;AACnD,qBAAqB,+FAAoB;AACzC,aAAa,+FAAoB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,SAAS,8FAAiB;AAC1B;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACO;AACP;AACA,oBAAoB,qBAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,kBAAkB,qDAAY;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,cAAc,uDAAU;AACxB;AACA,YAAY,qDAAQ;AACpB;AACA;AACA;;;;;;;;;;;;;;;;;;ACzFoD;AACqB;AACzE;AACO;AACP,iBAAiB,yFAAY;AAC7B;AACA,WAAW,oFAAM;AACjB;AACA,6BAA6B,sFAAS;AACtC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACrC8E;AAI/C;AAC2B;AACN;AAGhC;AACpB;AACO;AACP;AACA,kBAAkB,4DAAM;AACxB,qBAAqB,+DAAS,CAAC,0DAAU;AACzC;AACA;AACA;AACA;AACA;AACA,MAAM,qFAAO;AACb,QAAQ,iEAAa,CAAC,wDAAY;AAClC,qCAAqC,uDAAO;AAC5C,QAAQ,qFAAM;AACd,OAAO;AACP,MAAM;AACN,MAAM,qFAAO;AACb,qCAAqC,0DAAU;AAC/C,QAAQ,qFAAM;AACd,OAAO;AACP;AACA,GAAG;AACH;AACA;AACA;;;;;;;;;;;;;;;;;;;;AClCA;AACkD;AAMnB;AAQX;AACyB;AACK;AAClD;AACO;AACP,EAAE,wDAAY;AACd,kBAAkB,4DAAM;AACxB,mBAAmB,uDAAW,IAAI,0DAAc;AAChD,mBAAmB,4DAAM;AACzB,oBAAoB,0DAAc,IAAI,4DAAgB;AACtD;AACA,iBAAiB,kEAAY,CAAC,uEAAiB;AAC/C,IAAI,iEAAW,EAAE,2DAAW;AAC5B;AACA;AACA;AACA;AACA,2BAA2B,EAAE,wDAAY;AACzC;AACA,mBAAmB,+DAAU;AAC7B;AACA,kBAAkB,gEAAc;AAChC;AACA,eAAe,4DAAM;AACrB;AACA;AACA","sources":["webpack://nexus-io/./src/editor/NxEdit.js","webpack://nexus-io/./src/editor/NxEditComps.js","webpack://nexus-io/./src/editor/NxEditMenu.js","webpack://nexus-io/./src/editor/NxEditPrc.js","webpack://nexus-io/./src/editor/NxEditStarters.js","webpack://nexus-io/./src/editor/NxEditSwitch.js","webpack://nexus-io/./src/editor/NxEditor.js"],"sourcesContent":["import {\r\n  charMinMax,\r\n  idPattern,\r\n  supportedMediaTypes,\r\n  urlPattern,\r\n} from \"@i-is-as-i-does/nexus-core/src/validt/NxSpecs.js\"\r\nimport {\r\n  landmarkElm,\r\n  baseViewLink,\r\n  blockWrap,\r\n  getElm,\r\n  selectDropDown,\r\n  iconImage,\r\n} from \"../shared/NxCommons.js\"\r\nimport {\r\n  insertDiversion,\r\n  easeIn,\r\n  easeOut,\r\n} from \"@i-is-as-i-does/valva/src/modules/aliases.js\"\r\nimport { randomString } from \"@i-is-as-i-does/jack-js/src/modules/Help.js\"\r\nimport { getAltState } from \"../shared/NxState.js\"\r\nimport {\r\n  getStoredEditData,\r\n  registerEditData,\r\n} from \"@i-is-as-i-does/nexus-core/src/storg/NxMemory.js\"\r\nimport { isValidUrl } from \"@i-is-as-i-does/nexus-core/src/validt/NxStamper.js\"\r\nimport { newData, newThread } from \"./NxEditStarters.js\"\r\nimport {\r\n  getSrcData,\r\n  getThreadsList,\r\n} from \"@i-is-as-i-does/nexus-core/src/load/NxSrc.js\"\r\nimport {\r\n  dateInput,\r\n  baseLabel,\r\n  textareaInput,\r\n  textInput,\r\n  invalidSp,\r\n  deleteLinkBtn,\r\n  addBtn,\r\n  toggleAddBtn,\r\n} from \"./NxEditComps.js\"\r\nimport {\r\n  isUnique,\r\n  newState,\r\n  resolveMediaType,\r\n  setFeedbackIcon,\r\n  uniqueId,\r\n  toggleBtn,\r\n} from \"./NxEditPrc.js\"\r\nimport { getQuery } from \"@i-is-as-i-does/nexus-core/src/base/NxHost.js\"\r\nimport { downB64, upB64 } from \"../shared/NxIcons.js\"\r\nimport {\r\n  setEditMenu,\r\n  setLastAction,\r\n  setResetting,\r\n  toggleSaveBtn,\r\n} from \"./NxEditMenu.js\"\r\n\r\nvar hostElm\r\nvar editState = {\r\n  dataUrl: \"nexus-tmp\",\r\n  srcData: null,\r\n  threadId: \"/\",\r\n  threadIndex: -1,\r\n}\r\nvar originData = null\r\n\r\nvar threadChange = new CustomEvent(\"editThreadChange\")\r\nvar upDownEvent = new CustomEvent(\"IndexChange\")\r\n\r\nvar editIndex = null\r\nvar editLocal = null\r\nvar editDistant = null\r\nvar authorForm\r\nvar btnSrc = {\r\n  up: upB64,\r\n  down: downB64,\r\n}\r\nvar addThreadBtn\r\n\r\nvar threadsMap = {}\r\n// @doc originIdx: { id: currentId, idx: currentIdx, linked :{}}\r\n\r\nfunction moveItem(ident, siblingIdent, up = false) {\r\n  var from = threadsMap[ident].idx\r\n  var to = from + 1\r\n  if (up) {\r\n    to = from - 1\r\n  }\r\n  editState.srcData.index.splice(\r\n    to,\r\n    0,\r\n    editState.srcData.index.splice(from, 1)[0]\r\n  )\r\n  editState.srcData.threads.splice(\r\n    to,\r\n    0,\r\n    editState.srcData.threads.splice(from, 1)[0]\r\n  )\r\n  threadsMap[ident].idx = to\r\n  threadsMap[siblingIdent].idx = from\r\n}\r\n\r\nfunction toggleActiveBtn(ident, btn) {\r\n  if (threadsMap[ident].idx === 0) {\r\n    toggleBtn(btn[\"up\"], true)\r\n  } else {\r\n    toggleBtn(btn[\"up\"], false)\r\n  }\r\n  if (threadsMap[ident].idx + 1 === editState.srcData.index.length) {\r\n    toggleBtn(btn[\"down\"], true)\r\n  } else {\r\n    toggleBtn(btn[\"down\"], false)\r\n  }\r\n}\r\n\r\nfunction permuteThread(goingUp, goingDown) {\r\n  editIndex.removeChild(goingUp)\r\n  editIndex.insertBefore(goingUp, goingDown)\r\n  goingDown.dispatchEvent(upDownEvent)\r\n  goingUp.dispatchEvent(upDownEvent)\r\n}\r\n\r\nfunction moveItemHandler(li, it, ident) {\r\n  var act = function (redo) {\r\n    var isUp = it == \"up\"\r\n    if (!redo) {\r\n      isUp = !isUp\r\n    }\r\n    var sibling\r\n    if (isUp && threadsMap[ident].idx !== 0) {\r\n      sibling = li.previousSibling\r\n      moveItem(ident, sibling.dataset.ident, true)\r\n      permuteThread(li, sibling)\r\n    } else if (\r\n      !isUp &&\r\n      threadsMap[ident].idx + 1 !== editState.srcData.index.length\r\n    ) {\r\n      sibling = li.nextSibling\r\n      moveItem(ident, sibling.dataset.ident, false)\r\n      permuteThread(sibling, li)\r\n    }\r\n  }\r\n\r\n  setLastAction(act)\r\n  act(true)\r\n}\r\n\r\nfunction setMoveBtns(li, ident) {\r\n  var dv = getElm(\"DIV\", \"nx-edit-move\")\r\n  var btn = {\r\n    up: null,\r\n    down: null,\r\n  }\r\n  li.addEventListener(\"IndexChange\", function () {\r\n    toggleActiveBtn(ident, btn)\r\n  })\r\n  Object.keys(btn).forEach((it) => {\r\n    btn[it] = getElm(\"A\", \"nx-edit-move-\" + it)\r\n    btn[it].append(iconImage(btnSrc[it], 16))\r\n    dv.append(btn[it])\r\n\r\n    btn[it].addEventListener(\"click\", function () {\r\n      moveItemHandler(li, it, ident)\r\n    })\r\n  })\r\n  toggleActiveBtn(ident, btn)\r\n  li.append(dv)\r\n}\r\n\r\nfunction threadLocalForm(ident, indexElm) {\r\n  var form = getElm(\"FORM\", \"nx-thread-local-form\")\r\n\r\n  var fieldset1 = getElm(\"FIELDSET\")\r\n  var idCallback = function (inp) {\r\n    threadsMap[ident].id = inp.value\r\n  }\r\n  var titleCallback = function (inp) {\r\n    var targ = indexElm.querySelector(\".nx-thread-title\")\r\n    if (targ.textContent !== inp.value) {\r\n      targ.textContent = inp.value\r\n    }\r\n  }\r\n  fieldset1.append(inputElm([\"threads\", ident, \"id\"], idCallback))\r\n  fieldset1.append(inputElm([\"threads\", ident, \"title\"], titleCallback))\r\n  fieldset1.append(inputElm([\"threads\", ident, \"description\"]))\r\n\r\n  var fieldset2 = getElm(\"FIELDSET\")\r\n  var fields = [\"timestamp\", \"main\", \"aside\"]\r\n  fields.forEach((field) => {\r\n    fieldset2.append(inputElm([\"threads\", ident, \"content\", field]))\r\n  })\r\n\r\n  var fieldset3 = getElm(\"FIELDSET\")\r\n\r\n  var typeInp = inputElm([\"threads\", ident, \"content\", \"media\", \"type\"])\r\n  var typeCallback = function (inp, valid) {\r\n    if (valid) {\r\n      var item = typeInp.querySelector(\r\n        \"[data-item=\" + resolveMediaType(inp.value) + \"]\"\r\n      )\r\n      if (item) {\r\n        item.click()\r\n      }\r\n    }\r\n  }\r\n  fieldset3.append(\r\n    inputElm([\"threads\", ident, \"content\", \"media\", \"url\"], typeCallback)\r\n  )\r\n  fieldset3.append(typeInp)\r\n  fieldset3.append(inputElm([\"threads\", ident, \"content\", \"media\", \"caption\"]))\r\n\r\n  form.append(\r\n    landmarkElm(\"local thread\"),\r\n    fieldset1,\r\n    landmarkElm(\"content\"),\r\n    fieldset2,\r\n    landmarkElm(\"media\", 2),\r\n    fieldset3\r\n  )\r\n  return form\r\n}\r\n\r\nfunction setAddThreadBtn() {\r\n  addThreadBtn = addBtn()\r\n  toggleAddBtn(addThreadBtn, editState.srcData.index, \"threads\")\r\n\r\n  addThreadBtn.addEventListener(\"click\", function () {\r\n    if (!addThreadBtn.disabled) {\r\n      var ident = randomString(21)\r\n      var randomId = randomString(10)\r\n      var idx = editState.srcData.index.length\r\n      threadsMap[ident] = { id: randomId, idx: idx, linked: {} }\r\n\r\n      var callb = null\r\n      if (idx - 1 !== -1) {\r\n        callb = function () {\r\n          editIndex.childNodes[idx - 1].dispatchEvent(upDownEvent)\r\n        }\r\n      }\r\n\r\n      editState.srcData.threads.push(newThread(randomId))\r\n      editState.srcData.index.push(randomId)\r\n      var map = threadElms(ident)\r\n      var ks = [\"local\", \"distant\"]\r\n\r\n      ks.forEach((k) => {\r\n        map[k].parent.append(map[k].child)\r\n      })\r\n\r\n      insertDiversion(\r\n        map.index.parent,\r\n        map.index.child,\r\n        false,\r\n        true,\r\n        200,\r\n        callb\r\n      )\r\n      toggleSaveBtn(false)\r\n      toggleAddBtn(addThreadBtn, editState.srcData.index, \"threads\")\r\n    }\r\n  })\r\n}\r\n\r\nfunction linkInput(addLinkBtn, form, ident, i) {\r\n  var lkident = randomString(21)\r\n  threadsMap[ident].linked[lkident] = { idx: i }\r\n  var linkwrap = getElm(\"DIV\", \"nx-edit-distant-link\")\r\n  var store = { linked: null }\r\n  var elm = inputElm([\"threads\", ident, \"linked\", lkident], null, store)\r\n  var dltBtn = deleteLinkBtn()\r\n  var delwrap = getElm(\"DIV\", \"nx-distant-link-action\")\r\n  delwrap.append(dltBtn)\r\n\r\n  dltBtn.addEventListener(\"click\", () => {\r\n    var act = function (redo) {\r\n      var lidx = threadsMap[ident].linked[lkident].idx\r\n      var tidx = threadsMap[ident].idx\r\n      if (redo) {\r\n        easeOut(linkwrap, 200, function () {\r\n          linkwrap.remove()\r\n        })\r\n        var isLast = lidx === editState.srcData.threads[tidx].linked.length - 1\r\n        editState.srcData.threads[tidx].linked.splice(lidx, 1)\r\n        if (!isLast) {\r\n          for (let [k, v] of Object.entries(threadsMap[ident].linked)) {\r\n            if (v.idx > lidx) {\r\n              threadsMap[ident].linked[k].idx = v.idx - 1\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        if (lidx > editState.srcData.threads[tidx].linked.length - 1) {\r\n          editState.srcData.threads[tidx].linked.push(store.linked.value)\r\n          insertDiversion(form, linkwrap, false, true, 200)\r\n        } else {\r\n          editState.srcData.threads[tidx].linked.splice(\r\n            lidx,\r\n            0,\r\n            store.linked.value\r\n          )\r\n          for (let [k, v] of Object.entries(threadsMap[ident].linked)) {\r\n            if (v.idx >= lidx && k !== lkident) {\r\n              threadsMap[ident].linked[k].idx = v.idx + 1\r\n            }\r\n          }\r\n          var nextSibling = form.childNodes[lidx]\r\n          form.insertBefore(linkwrap, nextSibling)\r\n          easeIn(linkwrap, 200)\r\n        }\r\n      }\r\n      toggleAddBtn(addLinkBtn, editState.srcData.threads[tidx].linked, \"linked\")\r\n    }\r\n    setLastAction(act)\r\n    act(true)\r\n  })\r\n  linkwrap.append(elm, delwrap)\r\n  return linkwrap\r\n}\r\n\r\nfunction threadDistantForm(ident) {\r\n  var form = getElm(\"FORM\", \"nx-thread-distant-form\")\r\n  var addLinkBtn = addBtn()\r\n  toggleAddBtn(\r\n    addLinkBtn,\r\n    editState.srcData.threads[threadsMap[ident].idx].linked,\r\n    \"linked\"\r\n  )\r\n  addLinkBtn.addEventListener(\"click\", () => {\r\n    if (!addLinkBtn.disabled) {\r\n      editState.srcData.threads[threadsMap[ident].idx].linked.push(\"\")\r\n      insertDiversion(\r\n        form,\r\n        linkInput(\r\n          addLinkBtn,\r\n          form,\r\n          ident,\r\n          editState.srcData.threads[threadsMap[ident].idx].linked.length - 1\r\n        ),\r\n        false,\r\n        true,\r\n        200\r\n      )\r\n      toggleAddBtn(\r\n        addLinkBtn,\r\n        editState.srcData.threads[threadsMap[ident].idx].linked,\r\n        \"linked\"\r\n      )\r\n    }\r\n  })\r\n\r\n  if (\r\n    !Object.prototype.hasOwnProperty.call(\r\n      editState.srcData.threads[threadsMap[ident].idx],\r\n      \"linked\"\r\n    )\r\n  ) {\r\n    editState.srcData.threads[threadsMap[ident].idx].linked = []\r\n  } else if (editState.srcData.threads[threadsMap[ident].idx].linked.length) {\r\n    var elms = []\r\n    for (\r\n      var i = 0;\r\n      i < editState.srcData.threads[threadsMap[ident].idx].linked.length;\r\n      i++\r\n    ) {\r\n      var elm = linkInput(addLinkBtn, form, ident, i)\r\n      elms.push(elm)\r\n    }\r\n    form.append(...elms)\r\n  }\r\n\r\n  var formCnt = getElm(\"DIV\")\r\n  formCnt.append(landmarkElm(\"linked threads\"), form, addLinkBtn)\r\n\r\n  return formCnt\r\n}\r\n\r\nfunction threadLi(ident) {\r\n  var li = getElm(\"LI\")\r\n\r\n  if (editState.threadId !== threadsMap[ident].id) {\r\n    li.style.display = \"none\"\r\n  }\r\n  li.addEventListener(\"editThreadChange\", function () {\r\n    if (editState.threadId === threadsMap[ident].id) {\r\n      setTimeout(function () {\r\n        easeIn(li, 200)\r\n      }, 200)\r\n    } else {\r\n      easeOut(li, 200)\r\n    }\r\n  })\r\n  return li\r\n}\r\n\r\nfunction indexLink(ident) {\r\n  var itemState = getAltState(\r\n    editState,\r\n    threadsMap[ident].id,\r\n    threadsMap[ident].idx\r\n  )\r\n  var indLk = baseViewLink(itemState, false)\r\n  if (editState.threadId === threadsMap[ident].id) {\r\n    indLk.classList.add(\"nx-on-display\")\r\n  }\r\n\r\n  indLk.addEventListener(\"click\", () => {\r\n    if (editState.threadId !== threadsMap[ident].id) {\r\n      editState.threadId = threadsMap[ident].id\r\n      editState.threadIndex = threadsMap[ident].idx\r\n      var prev = editIndex.querySelector(\".nx-on-display\")\r\n      if (prev) {\r\n        prev.classList.remove(\"nx-on-display\")\r\n      }\r\n      indLk.classList.add(\"nx-on-display\")\r\n      editLocal.childNodes.forEach((lchild) => {\r\n        lchild.dispatchEvent(threadChange)\r\n      })\r\n      editDistant.childNodes.forEach((dchild) => {\r\n        dchild.dispatchEvent(threadChange)\r\n      })\r\n    }\r\n  })\r\n\r\n  return indLk\r\n}\r\n\r\nfunction threadElms(ident) {\r\n  var map = {\r\n    index: { parent: editIndex, child: null, link: null, del: null },\r\n    local: { parent: editLocal, child: null },\r\n    distant: { parent: editDistant, child: null },\r\n  }\r\n\r\n  map.distant.child = threadLi(ident)\r\n  map.local.child = threadLi(ident)\r\n\r\n  map.index.child = getElm(\"LI\")\r\n  map.index.child.dataset.ident = ident\r\n  map.index.link = indexLink(ident)\r\n  map.index.child.append(map.index.link)\r\n  setMoveBtns(map.index.child, ident)\r\n\r\n  map.distant.child.append(threadDistantForm(ident))\r\n  map.local.child.append(threadLocalForm(ident, map.index.child))\r\n\r\n  map.index.del = deleteThreadElm(\r\n    map.local.child,\r\n    map.distant.child,\r\n    map.index.child,\r\n    ident\r\n  )\r\n  map.index.child.append(map.index.del)\r\n\r\n  return map\r\n}\r\n\r\nfunction deleteEvent(localLi, distantLi, indexLi, ident) {\r\n  var threadData = Object.assign(\r\n    {},\r\n    editState.srcData.threads[threadsMap[ident].idx]\r\n  )\r\n  var act = function (redo) {\r\n    var idx = threadsMap[ident].idx\r\n    var len = editState.srcData.index.length\r\n\r\n    if (redo) {\r\n      if (idx < len - 1) {\r\n        for (let [k, v] of Object.entries(threadsMap)) {\r\n          if (v.idx > idx) {\r\n            threadsMap[k].idx = v.idx - 1\r\n          }\r\n        }\r\n      }\r\n\r\n      editState.srcData.index.splice(idx, 1)\r\n      editState.srcData.threads.splice(idx, 1)\r\n      ;[distantLi, localLi, indexLi].forEach((elm) => {\r\n        easeOut(elm, 200, function () {\r\n          elm.remove()\r\n        })\r\n      })\r\n\r\n      if (len > 1) {\r\n        if (idx === 0) {\r\n          indexLi.nextSibling.dispatchEvent(upDownEvent)\r\n        } else if (idx === len - 1) {\r\n          indexLi.previousSibling.dispatchEvent(upDownEvent)\r\n        }\r\n      }\r\n\r\n      if (editState.threadId === threadsMap[ident].id) {\r\n        editState.threadId = \"/\"\r\n        editState.threadIndex = -1\r\n        distantLi.dispatchEvent(threadChange)\r\n        localLi.dispatchEvent(threadChange)\r\n      } else if (editState.threadIndex > idx) {\r\n        editState.threadIndex--\r\n      }\r\n    } else {\r\n      editState.srcData.index.splice(idx, 0, threadData.id)\r\n      editState.srcData.threads.splice(idx, 0, threadData)\r\n\r\n      if (idx <= len - 1) {\r\n        for (let [k, v] of Object.entries(threadsMap)) {\r\n          if (v.id !== threadData.id && v.idx >= idx) {\r\n            threadsMap[k].idx = v.idx + 1\r\n          }\r\n        }\r\n\r\n        var next = editIndex.childNodes[idx]\r\n        editIndex.insertBefore(indexLi, next)\r\n        if (idx === 0) {\r\n          next.dispatchEvent(upDownEvent)\r\n        }\r\n      } else {\r\n        editIndex.append(indexLi)\r\n        if (len > 1) {\r\n          indexLi.previousSibling.dispatchEvent(upDownEvent)\r\n        }\r\n      }\r\n\r\n      editLocal.append(localLi)\r\n      editDistant.append(distantLi)\r\n      easeIn(indexLi, 200)\r\n      indexLi.firstChild.click()\r\n    }\r\n    toggleAddBtn(addThreadBtn, editState.srcData.index, \"threads\")\r\n  }\r\n  setLastAction(act)\r\n  act(true)\r\n}\r\n\r\nfunction deleteThreadElm(localLi, distantLi, indexLi, ident) {\r\n  var btn = getElm(\"BUTTON\", \"nx-delete-thread\")\r\n  btn.type = \"button\"\r\n  btn.textContent = \"-\"\r\n\r\n  btn.addEventListener(\"click\", function () {\r\n    deleteEvent(localLi, distantLi, indexLi, ident)\r\n  })\r\n  return btn\r\n}\r\n\r\nfunction setAuthorValue(ref, value) {\r\n  if (!editState.srcData.author) {\r\n    editState.srcData.author = {}\r\n  }\r\n  editState.srcData.author[ref[1]] = value\r\n  return\r\n}\r\n\r\nfunction setThreadIndex(idx) {\r\n  if (!editState.srcData.threads) {\r\n    editState.srcData.threads = []\r\n  } else if (typeof editState.srcData.threads[idx] === \"undefined\") {\r\n    editState.srcData.threads[idx] = {}\r\n  }\r\n}\r\n\r\nfunction setThreadId(ref, idx, value) {\r\n  threadsMap[ref[1]].id = value\r\n  editState.srcData.index[idx] = value\r\n  editState.srcData.threads[idx].id = value\r\n}\r\n\r\nfunction setThreadInfo(ref, idx, value) {\r\n  editState.srcData.threads[idx][ref[2]] = value\r\n}\r\n\r\nfunction setContentValue(ref, idx, value) {\r\n  if (!editState.srcData.threads[idx].content) {\r\n    editState.srcData.threads[idx].content = {}\r\n  }\r\n  if (ref[3] !== \"media\") {\r\n    editState.srcData.threads[idx].content[ref[3]] = value\r\n    return\r\n  }\r\n  if (!editState.srcData.threads[idx].content.media) {\r\n    editState.srcData.threads[idx].content.media = {}\r\n  }\r\n  editState.srcData.threads[idx].content.media[ref[4]] = value\r\n  return\r\n}\r\n\r\nfunction setLinkedValue(ref, idx, value) {\r\n  if (!editState.srcData.threads[idx].linked) {\r\n    editState.srcData.threads[idx].linked = [value]\r\n  } else {\r\n    editState.srcData.threads[idx].linked[\r\n      threadsMap[ref[1]].linked[ref[3]].idx\r\n    ] = value\r\n  }\r\n}\r\n\r\nfunction setNewValue(ref, value) {\r\n  if (editState.srcData === null) {\r\n    editState.srcData = {}\r\n    editState.srcData.index = []\r\n  }\r\n  if (ref[0] === \"author\") {\r\n    return setAuthorValue(ref, value)\r\n  }\r\n  var idx = threadsMap[ref[1]].idx\r\n  setThreadIndex(idx)\r\n\r\n  if (ref[2] === \"id\") {\r\n    return setThreadId(ref, idx, value)\r\n  }\r\n  if (![\"linked\", \"content\"].includes(ref[2])) {\r\n    return setThreadInfo(ref, idx, value)\r\n  }\r\n\r\n  if (ref[2] === \"content\") {\r\n    return setContentValue(ref, idx, value)\r\n  }\r\n  setLinkedValue(ref, idx, value)\r\n}\r\n\r\nfunction fieldValue(ref) {\r\n  if (editState.srcData) {\r\n    if (ref[0] == \"author\") {\r\n      return editState.srcData[ref[0]][ref[1]]\r\n    }\r\n    var idx = threadsMap[ref[1]].idx\r\n    if (![\"linked\", \"content\"].includes(ref[2])) {\r\n      return editState.srcData.threads[idx][ref[2]]\r\n    }\r\n    if (ref[2] === \"content\") {\r\n      if (ref[3] !== \"media\") {\r\n        return editState.srcData.threads[idx].content[ref[3]]\r\n      }\r\n      return editState.srcData.threads[idx].content.media[ref[4]]\r\n    }\r\n    return editState.srcData.threads[idx].linked[\r\n      threadsMap[ref[1]].linked[ref[3]].idx\r\n    ]\r\n  }\r\n  return \"\"\r\n}\r\n\r\nfunction inputElm(ref, callback = null, store = null) {\r\n  var val = fieldValue(ref)\r\n\r\n  var pos = ref.length - 1\r\n  if (ref[pos - 1] === \"linked\") {\r\n    pos--\r\n  }\r\n  var field = ref[pos]\r\n  pos--\r\n  if (ref[pos - 1] === \"threads\") {\r\n    pos--\r\n  }\r\n  var parent = ref[pos]\r\n\r\n  var inp\r\n  if ([\"about\", \"description\", \"main\", \"aside\", \"caption\"].includes(field)) {\r\n    inp = textareaInput(val)\r\n  } else if (field == \"timestamp\") {\r\n    inp = dateInput(val)\r\n  } else {\r\n    inp = textInput(val)\r\n  }\r\n  inp.classList.add(\"nx-edit-input\")\r\n\r\n  var hook = ref.join(\"-\")\r\n  inp.id = hook\r\n  inp.name = hook\r\n  if (\r\n    [\r\n      \"handle\",\r\n      \"title\",\r\n      \"main\",\r\n      \"id\",\r\n      \"url\",\r\n      \"type\",\r\n      \"timestamp\",\r\n      \"linked\",\r\n    ].includes(field)\r\n  ) {\r\n    inp.required = true\r\n  }\r\n  var ident = field\r\n  if (field === \"linked\") {\r\n    ident = \"url\"\r\n  }\r\n\r\n  var lb = baseLabel(ident)\r\n  var indc = getElm(\"SPAN\", \"nx-edit-indication\")\r\n  var fdbck = invalidSp()\r\n  lb.append(indc, fdbck)\r\n\r\n  switch (field) {\r\n    case \"url\":\r\n      indc.textContent = \"[http]\"\r\n      inp.pattern = urlPattern\r\n      break\r\n    case \"linked\":\r\n      indc.textContent = \"[http]\"\r\n      inp.pattern = urlPattern\r\n      break\r\n    case \"id\":\r\n      indc.textContent = \"[A-Za-z0-9-][3-36]\"\r\n      inp.pattern = idPattern\r\n      break\r\n    case \"type\":\r\n      inp.pattern = \"(\" + supportedMediaTypes.join(\"|\") + \")\"\r\n      break\r\n    case \"timestamp\":\r\n      break\r\n    default:\r\n      var minmax = charMinMax[field]\r\n      indc.textContent = \"[\" + minmax[0] + \"-\" + minmax[1] + \"]\"\r\n      inp.setAttribute(\"maxlength\", minmax[1])\r\n      inp.setAttribute(\"minlength\", minmax[0])\r\n  }\r\n\r\n  if (store) {\r\n    store[field] = inp\r\n  }\r\n\r\n  var wrap = getElm(\"DIV\", \"nx-edit-input nx-edit-\" + parent + \"-\" + field)\r\n  wrap.append(lb)\r\n  if (field === \"type\") {\r\n    var items = supportedMediaTypes\r\n    wrap.append(selectDropDown(items, inp, null, \"nx-edit-media-type-select\"))\r\n  } else {\r\n    wrap.append(inp)\r\n  }\r\n\r\n  setInputEvt(ref, inp, fdbck, callback)\r\n  inputEvtHandler(ref, inp, fdbck, callback)\r\n\r\n  return wrap\r\n}\r\n\r\nfunction inputEvtHandler(ref, inp, fdbck, callback) {\r\n  var valid = inp.checkValidity()\r\n  var validPromise = null\r\n\r\n  if ((valid && ref.includes(\"url\")) || ref.includes(\"linked\")) {\r\n    valid = isValidUrl(inp.value)\r\n    if (valid && ref.includes(\"linked\")) {\r\n      valid = isUnique(\r\n        editState.srcData.threads[threadsMap[ref[1]].idx].linked,\r\n        inp.value,\r\n        threadsMap[ref[1]].linked[ref[3]].idx\r\n      )\r\n      if (valid) {\r\n        validPromise = getSrcData(inp.value)\r\n          .then(() => {\r\n            return true\r\n          })\r\n          .catch(() => {\r\n            return false\r\n          })\r\n      }\r\n    }\r\n  } else if (ref.includes(\"id\")) {\r\n    var nId = uniqueId(inp.value, threadsMap[ref[1]].idx)\r\n    if (nId !== inp.value) {\r\n      inp.value = nId\r\n    }\r\n    valid = true\r\n  }\r\n\r\n  if (validPromise === null) {\r\n    validPromise = Promise.resolve(valid)\r\n  }\r\n\r\n  validPromise.then((isValid) => {\r\n    setNewValue(ref, inp.value)\r\n    setFeedbackIcon(fdbck, isValid)\r\n    if (typeof callback === \"function\") {\r\n      callback(inp, isValid)\r\n    }\r\n  })\r\n}\r\n\r\nfunction setInputEvt(ref, inp, fdbck, callback) {\r\n  var c = 0\r\n  var undone = \"\"\r\n  var prev = inp.value\r\n  inp.addEventListener(\"focus\", function () {\r\n    prev = inp.value\r\n  })\r\n  inp.addEventListener(\"change\", function () {\r\n    inputEvtHandler(ref, inp, fdbck, callback)\r\n    if (c > 0) {\r\n      var act = function (redo) {\r\n        if (redo) {\r\n          inp.value = undone\r\n        } else {\r\n          undone = inp.value\r\n          inp.value = prev\r\n        }\r\n        inputEvtHandler(ref, inp, fdbck, callback)\r\n      }\r\n      setLastAction(act)\r\n    } else {\r\n      c++\r\n    }\r\n  })\r\n}\r\n\r\nfunction setAuthorForm() {\r\n  authorForm = getElm(\"FORM\", \"nx-edit-author\")\r\n  setAuthorInputs()\r\n}\r\n\r\nfunction setAuthorInputs(ease = false) {\r\n  var fields = [\"handle\", \"url\", \"about\"]\r\n  fields.forEach((field) => {\r\n    var inp = inputElm([\"author\", field])\r\n    if (ease) {\r\n      insertDiversion(authorForm, inp, false, true, 200)\r\n    } else {\r\n      authorForm.append(inp)\r\n    }\r\n  })\r\n}\r\n\r\nfunction setThreads(ease = false) {\r\n  var items = editState.srcData.index\r\n\r\n  if (items.length) {\r\n    setResetting(true)\r\n    var callb = null\r\n    for (var i = 0; i < items.length; i++) {\r\n      if (i === items.length - 1) {\r\n        callb = function () {\r\n          setResetting(false)\r\n        }\r\n      }\r\n      setThread(i, items[i], callb, ease)\r\n    }\r\n  }\r\n}\r\n\r\nfunction setThread(idx, id, callb, ease = false) {\r\n  var ident = randomString(21)\r\n  threadsMap[ident] = { id: id, idx: idx, linked: {} }\r\n\r\n  var map = threadElms(ident)\r\n\r\n  for (let [k, elmSet] of Object.entries(map)) {\r\n    if (ease && (k === \"index\" || id === editState.threadId)) {\r\n      insertDiversion(elmSet.parent, elmSet.child, false, true, 200, callb)\r\n    } else {\r\n      elmSet.parent.append(elmSet.child)\r\n      if (callb) {\r\n        callb()\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction setThreadsForms() {\r\n  editIndex = getElm(\"UL\", \"nx-edit-index\")\r\n  editLocal = getElm(\"UL\", \"nx-edit-local\")\r\n  editDistant = getElm(\"UL\", \"nx-edit-distant\")\r\n  setThreads()\r\n}\r\n\r\nexport function resetData(data) {\r\n  var prvState = JSON.stringify(editState)\r\n  if (data === null) {\r\n    data = newData()\r\n  }\r\n\r\n  var state = newState(data)\r\n  if (state.srcData.threads.length) {\r\n    state.threadIndex = 0\r\n    state.threadId = state.srcData.threads[0].id\r\n  }\r\n  var nxtState = JSON.stringify(state)\r\n  var act = function (redo) {\r\n    if (editState.srcData.threads.length) {\r\n      var parents = [authorForm, editIndex, editLocal, editDistant]\r\n      parents.forEach((parent, p) => {\r\n        var childr = Array.from(parent.childNodes)\r\n        var lastp = p === parents.length - 1\r\n        childr.forEach((child, c) => {\r\n          var prc = null\r\n          if (lastp && c === childr.length - 1) {\r\n            prc = function () {\r\n              var nstate\r\n              if (redo) {\r\n                nstate = nxtState\r\n              } else {\r\n                nstate = prvState\r\n              }\r\n              editState = Object.assign({}, JSON.parse(nstate))\r\n              setAuthorInputs(true)\r\n              setThreads(true)\r\n            }\r\n          }\r\n          easeOut(child, 200, function () {\r\n            child.remove()\r\n            if (prc) {\r\n              prc()\r\n            }\r\n          })\r\n        })\r\n      })\r\n    }\r\n  }\r\n  act(true)\r\n  setLastAction(act, true)\r\n}\r\n\r\nexport function getOriginData() {\r\n  return originData\r\n}\r\n\r\nexport function getHostElm() {\r\n  return hostElm\r\n}\r\n\r\nexport function setEditState(state, nxelm) {\r\n  hostElm = nxelm\r\n  var url = \"nexus-tmp\"\r\n  var state = state\r\n  var data\r\n\r\n  if (getQuery(\"new\")) {\r\n    data = newData()\r\n    state = null\r\n  } else {\r\n    if (state.dataUrl) {\r\n      url = state.dataUrl\r\n    }\r\n    data = getStoredEditData(url)\r\n    if (data === null) {\r\n      if (state.srcData !== null) {\r\n        data = state.srcData\r\n      } else {\r\n        data = newData()\r\n      }\r\n      registerEditData(url, data)\r\n    }\r\n  }\r\n\r\n  if (!data.index) {\r\n    data.index = getThreadsList(data)\r\n  }\r\n\r\n  if (state !== null && state.srcData !== null) {\r\n    originData = JSON.stringify(state.srcData)\r\n  } else {\r\n    originData = JSON.stringify(data)\r\n  }\r\n\r\n  var id = data.threads[0].id\r\n  var idx = 0\r\n\r\n  if (state && state.threadId !== \"/\" && data.index.includes(state.threadId)) {\r\n    id = state.threadId\r\n    idx = data.index.indexOf(state.threadId)\r\n  }\r\n\r\n  editState = newState(data, url, id, idx)\r\n\r\n  setEditMenu()\r\n  setThreadsForms()\r\n  setAuthorForm()\r\n  setAddThreadBtn()\r\n}\r\n\r\nexport function authorBlock() {\r\n  return blockWrap(\"author\", [authorForm], landmarkElm(\"author\"))\r\n}\r\nexport function editIndexBlock() {\r\n  return blockWrap(\r\n    \"threads-list\",\r\n    [editIndex, addThreadBtn],\r\n    landmarkElm(\"threads\")\r\n  )\r\n}\r\nexport function editLocalBlock() {\r\n  return blockWrap(\"local\", [editLocal], false)\r\n}\r\nexport function editDistantBlock() {\r\n  return blockWrap(\"distant\", [editDistant], false)\r\n}\r\nexport function getEditState() {\r\n  return editState\r\n}\r\n","import { getTxt } from \"@i-is-as-i-does/nexus-core/src/transl/NxCoreTranslate.js\"\r\nimport { registerTranslElm } from \"@i-is-as-i-does/nexus-core/src/transl/NxElmTranslate.js\"\r\nimport { itemsMinMax } from \"@i-is-as-i-does/nexus-core/src/validt/NxSpecs\"\r\n\r\nimport { getElm, iconImage } from \"../shared/NxCommons.js\"\r\nimport { invalidB64 } from \"../shared/NxIcons.js\"\r\nexport function textInput(val) {\r\n  var inp = getElm(\"INPUT\", \"nx-edit-text\")\r\n  inp.type = \"text\"\r\n  inp.value = val\r\n  return inp\r\n}\r\n\r\nexport function textareaInput(val) {\r\n  var inp = getElm(\"TEXTAREA\", \"nx-edit-textarea\")\r\n  inp.textContent = val\r\n  return inp\r\n}\r\nexport function dateInput(val) {\r\n  var inp = getElm(\"INPUT\", \"nx-edit-date\")\r\n  inp.type = \"datetime-local\"\r\n  inp.value = val\r\n  return inp\r\n}\r\n\r\nexport function baseLabel(field) {\r\n  var lb = getElm(\"LABEL\", \"nx-edit-label\")\r\n  lb.for = field\r\n  var title = getElm(\"SPAN\", \"nx-edit-title\")\r\n  title.textContent = getTxt(field)\r\n  registerTranslElm(title, field)\r\n  lb.append(title)\r\n  return lb\r\n}\r\n\r\nexport function deleteLinkBtn() {\r\n  var btn = getElm(\"BUTTON\", \"nx-delete-link\")\r\n  btn.type = \"button\"\r\n  btn.textContent = \"-\"\r\n  return btn\r\n}\r\n\r\nexport function addBtn() {\r\n  var btn = getElm(\"BUTTON\", \"nx-add-link\")\r\n  btn.type = \"button\"\r\n  btn.textContent = \"+\"\r\n  return btn\r\n}\r\n\r\nexport function invalidSp() {\r\n  var sp = getElm(\"SPAN\", \"nx-edit-feedback\")\r\n  sp.append(iconImage(invalidB64))\r\n  return sp\r\n}\r\n\r\nexport function toggleAddBtn(btn, haystack, itemsKey) {\r\n  var disabled = false\r\n  if (itemsMinMax[itemsKey][1] <= haystack.length) {\r\n    disabled = true\r\n  }\r\n  if (btn.disabled !== disabled) {\r\n    btn.classList.toggle(\"nx-disabled\")\r\n    btn.disabled = disabled\r\n  }\r\n}\r\n","import {\r\n  getThreadsList,\r\n  loadSrcFile,\r\n} from \"@i-is-as-i-does/nexus-core/src/load/NxSrc\"\r\nimport { logErr } from \"@i-is-as-i-does/nexus-core/src/logs/NxLog\"\r\nimport { registerEditData } from \"@i-is-as-i-does/nexus-core/src/storg/NxMemory\"\r\nimport { validData } from \"@i-is-as-i-does/nexus-core/src/validt/NxStamper\"\r\nimport {\r\n  getElm,\r\n  iconImage,\r\n  setHistoryControls,\r\n  toggleNavEnd,\r\n} from \"../shared/NxCommons.js\"\r\nimport {\r\n  downloadB64,\r\n  newB64,\r\n  openB64,\r\n  redoB64,\r\n  resetB64,\r\n  saveB64,\r\n  undoB64,\r\n} from \"../shared/NxIcons.js\"\r\nimport { getEditState, getHostElm, getOriginData, resetData } from \"./NxEdit.js\"\r\nimport { getTxt } from \"@i-is-as-i-does/nexus-core/src/transl/NxCoreTranslate\"\r\nimport { splitFlap } from \"@i-is-as-i-does/valva/src/modules/aliases\"\r\nimport { toggleBtn } from \"./NxEditPrc.js\"\r\nimport { newData } from \"./NxEditStarters.js\"\r\n\r\nvar actionFdbck\r\nvar feedbackrun\r\n\r\nvar saveBtn\r\nvar resetBtn\r\nvar editMenu\r\n\r\nvar actCtrls = {\r\n  ctrls: {\r\n    prev: { symbol: undoB64, elm: null },\r\n    next: { symbol: redoB64, elm: null },\r\n  },\r\n  position: 0,\r\n  count: 1,\r\n}\r\n\r\nvar resetting = false\r\nvar lastAction\r\n\r\nfunction setActionFeedback() {\r\n  actionFdbck = getElm(\"SPAN\", \"nx-action-feedback\")\r\n}\r\n\r\nfunction downloadBtn() {\r\n  var dlBtn = getElm(\"A\", \"nx-download\")\r\n  dlBtn.append(iconImage(downloadB64, 20))\r\n  dlBtn.addEventListener(\"click\", function () {\r\n    var data = Object.assign({}, getEditState().srcData)\r\n    delete data.index\r\n    var check = validData(data)\r\n    if (!check) {\r\n      displayFeedback(\"Invalid Nexus data\")\r\n    }\r\n    data = JSON.stringify(data, undefined, 2)\r\n    var dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(data)\r\n    var anchor = getElm(\"A\")\r\n    anchor.setAttribute(\"href\", dataStr)\r\n    anchor.setAttribute(\"download\", \"nexus.json\")\r\n    getHostElm().appendChild(anchor)\r\n    anchor.click()\r\n    anchor.remove()\r\n  })\r\n  return dlBtn\r\n}\r\n\r\nfunction newDocumenBtn() {\r\n  var newBtn = getElm(\"A\", \"nx-new\")\r\n  newBtn.append(iconImage(newB64, 20))\r\n  newBtn.addEventListener(\"click\", function () {\r\n    resetData(newData())\r\n  })\r\n  return newBtn\r\n}\r\n\r\nfunction openBtn() {\r\n  var inp = fileInput()\r\n  var btn = getElm(\"A\", \"nx-open-file\")\r\n  btn.append(iconImage(openB64, 20))\r\n  btn.addEventListener(\"click\", function () {\r\n    inp.click()\r\n  })\r\n  var wrap = getElm(\"SPAN\")\r\n  wrap.append(inp, btn)\r\n  return wrap\r\n}\r\n\r\nfunction fileInput() {\r\n  var inp = getElm(\"INPUT\")\r\n  inp.type = \"file\"\r\n  inp.accept = \"application/json\"\r\n  inp.addEventListener(\"change\", function (evt) {\r\n    loadSrcFile(evt, true)\r\n      .then((fdata) => {\r\n        fdata.index = getThreadsList(fdata)\r\n        resetData(fdata)\r\n      })\r\n      .catch((err) => {\r\n        logErr(err.message)\r\n        displayFeedback(\"Invalid source\")\r\n      })\r\n    inp.value = \"\"\r\n  })\r\n  inp.style.display = \"none\"\r\n  return inp\r\n}\r\n\r\nfunction setSaveBtn() {\r\n  saveBtn = getElm(\"A\", \"nx-save\")\r\n  saveBtn.append(iconImage(saveB64, 20))\r\n  toggleBtn(saveBtn, true)\r\n  saveBtn.addEventListener(\"click\", function () {\r\n    if (!saveBtn.classList.contains(\"nx-disabled\")) {\r\n      var editState = getEditState()\r\n      registerEditData(editState.dataUrl, editState.srcData)\r\n      displayFeedback(\"saved\")\r\n      toggleBtn(saveBtn, true)\r\n      setResetStatus()\r\n    }\r\n  })\r\n}\r\n\r\nfunction setResetStatus() {\r\n  if (getOriginData() !== JSON.stringify(getEditState().srcData)) {\r\n    toggleBtn(resetBtn, false)\r\n  } else {\r\n    toggleBtn(resetBtn, true)\r\n  }\r\n}\r\n\r\nfunction setResetBtn() {\r\n  resetBtn = getElm(\"A\", \"nx-reset\")\r\n  resetBtn.append(iconImage(resetB64, 20))\r\n\r\n  setResetStatus()\r\n  resetBtn.addEventListener(\"click\", function () {\r\n    if (!resetBtn.classList.contains(\"nx-disabled\")) {\r\n      resetData(JSON.parse(getOriginData()))\r\n      toggleBtn(resetBtn, true)\r\n    }\r\n  })\r\n}\r\n\r\nfunction editNav() {\r\n  var wrp = getElm(\"DIV\", \"nx-edit-nav\")\r\n  setActionFeedback()\r\n  setResetBtn()\r\n  setSaveBtn()\r\n\r\n  var links = getElm(\"DIV\")\r\n\r\n  links.append(resetBtn, newDocumenBtn(), openBtn(), saveBtn, downloadBtn())\r\n  wrp.append(actionFdbck, links)\r\n  return wrp\r\n}\r\n\r\nfunction triggerUndoRedo(ctrl) {\r\n  lastAction(ctrl === \"next\")\r\n  toggleSaveBtn(false)\r\n}\r\n\r\nfunction editActions() {\r\n  var wrp = getElm(\"DIV\", \"nx-edit-actions nx-history-nav\")\r\n  setHistoryControls(actCtrls, triggerUndoRedo, true)\r\n  wrp.append(actCtrls.ctrls[\"prev\"].elm, actCtrls.ctrls[\"next\"].elm)\r\n  return wrp\r\n}\r\n\r\nexport function setEditMenu() {\r\n  editMenu = getElm(\"DIV\", \"nx-edit-menu\")\r\n  editMenu.append(editNav(), editActions())\r\n}\r\n\r\nexport function displayFeedback(msg) {\r\n  var txt = getTxt(msg)\r\n  if (feedbackrun) {\r\n    clearTimeout(feedbackrun)\r\n  }\r\n  splitFlap(actionFdbck, txt, 25)\r\n  feedbackrun = setTimeout(function () {\r\n    splitFlap(actionFdbck, \"\", 25)\r\n  }, 1500 + txt.length * 20)\r\n}\r\n\r\nexport function toggleSaveBtn(disabled = false) {\r\n  toggleBtn(saveBtn, disabled)\r\n}\r\n\r\nexport function setLastAction(callback, bypass = false) {\r\n  if (!resetting || bypass) {\r\n    lastAction = callback\r\n    actCtrls.count = 2\r\n    actCtrls.position = 1\r\n    toggleNavEnd(actCtrls)\r\n    toggleSaveBtn(false)\r\n  }\r\n}\r\n\r\nexport function setResetting(bool) {\r\n  resetting = bool\r\n}\r\n\r\nexport function getEditMenu() {\r\n  return editMenu\r\n}\r\n","import { replaceDiacritics } from \"@i-is-as-i-does/jack-js/src/modules/Help.js\"\r\nimport { supportedOembedMedia } from \"@i-is-as-i-does/nexus-core/src/validt/NxSpecs\"\r\nimport { invalidB64, validB64 } from \"../shared/NxIcons\"\r\nimport { getEditState } from \"./NxEdit\"\r\n\r\nconst guessMap = {\r\n  image: [\"jpg\", \"jpeg\", \"gif\", \"svg\", \"png\", \"webp\"],\r\n  video: [\"mp4\", \"webm\"],\r\n  audio: [\"mp3\"],\r\n}\r\n\r\nexport function resolveMediaType(val) {\r\n  for (var p = 0; p < supportedOembedMedia.length; p++) {\r\n    if (val.includes(supportedOembedMedia[p])) {\r\n      return supportedOembedMedia[p]\r\n    }\r\n  }\r\n  var ext = val.split(\".\").pop()\r\n  for (let [type, exts] of Object.entries(guessMap)) {\r\n    if (exts.includes(ext)) {\r\n      return type\r\n    }\r\n  }\r\n\r\n  return \"page\"\r\n}\r\n\r\nexport function convertToId(title) {\r\n  return replaceDiacritics(title)\r\n    .trim()\r\n    .replace(/[^A-Za-z0-9]+/g, \"-\")\r\n    .replace(/(^-|-$)+/g, \"\")\r\n}\r\n\r\nexport function newState(data, url = \"nexus-tmp\", id = \"/\", idx = -1) {\r\n  return {\r\n    dataUrl: url,\r\n    srcData: data,\r\n    threadId: id,\r\n    threadIndex: idx,\r\n  }\r\n}\r\n\r\nexport function toggleBtn(btn, disabled = false) {\r\n  var hasDisbClass = btn.classList.contains(\"nx-disabled\")\r\n  if (!disabled && hasDisbClass) {\r\n    btn.classList.remove(\"nx-disabled\")\r\n  } else if (disabled && !hasDisbClass) {\r\n    btn.classList.add(\"nx-disabled\")\r\n  }\r\n}\r\n\r\nexport function isUnique(haystack, needle, excludeIdx) {\r\n  if (haystack.indexOf(needle) !== -1) {\r\n    for (var c = 0; c < haystack.length; c++) {\r\n      if (c !== excludeIdx && haystack[c] === needle) {\r\n        return false\r\n      }\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\nexport function uniqueId(id, idx) {\r\n  id = convertToId(id)\r\n  var editState = getEditState()\r\n  if (!isUnique(editState.srcData.index, id, idx)) {\r\n    var sp = id.split(\"-\")\r\n    var last = sp.pop()\r\n    var incr\r\n    if (!isNaN(last)) {\r\n      incr = parseInt(last)\r\n      incr++\r\n    } else {\r\n      sp.push(last)\r\n      incr = 1\r\n    }\r\n    id = sp.join(\"-\")\r\n    while (editState.srcData.index.includes(id + \"-\" + incr)) {\r\n      incr++\r\n    }\r\n    id += \"-\" + incr\r\n  }\r\n  return id\r\n}\r\n\r\nexport function setFeedbackIcon(fdbck, valid) {\r\n  var icsrc = invalidB64\r\n  if (valid) {\r\n    icsrc = validB64\r\n  }\r\n  fdbck.firstChild.src = icsrc\r\n}\r\n","import {\r\n  randomInt,\r\n  randomString,\r\n} from \"@i-is-as-i-does/jack-js/src/modules/Help.js\"\r\nimport { appUrl } from \"@i-is-as-i-does/nexus-core/src/validt/NxSpecs.js\"\r\n\r\nexport function newData() {\r\n  var randomId = randomString(10)\r\n  return {\r\n    nexus: appUrl,\r\n    author: {\r\n      handle: \"Anonymous-\" + randomInt(100, 999),\r\n      about: \"\",\r\n      url: \"http://\",\r\n    },\r\n    threads: [newThread(randomId)],\r\n    index: [randomId],\r\n  }\r\n}\r\n\r\nexport function newThread(randomId) {\r\n  return {\r\n    id: randomId,\r\n    title: randomId,\r\n    description: \"...\",\r\n    content: {\r\n      timestamp: new Date().toISOString().substring(0, 16),\r\n      main: \"...\",\r\n      aside: \"\",\r\n      media: {\r\n        url: \"\",\r\n        type: \"\",\r\n        caption: \"\",\r\n      },\r\n    },\r\n    linked: [],\r\n  }\r\n}\r\n","import { fadeOut, fadeIn } from \"@i-is-as-i-does/valva/src/modules/aliases.js\"\r\nimport {\r\n  getElm,\r\n  iconImage,\r\n} from \"../shared/NxCommons.js\"\r\nimport { editB64, previewB64 } from \"../shared/NxIcons.js\"\r\nimport { triggerUpdate } from \"../shared/NxState.js\"\r\nimport {\r\n  getEditState,\r\n} from \"./NxEdit.js\"\r\n\r\nexport function instanceSwitch(editInst, readerInst) {\r\n  var previewOn = false\r\nvar instanceBtn = getElm(\"A\", \"nx-edit-switch\")\r\n  instanceBtn.append(iconImage(previewB64, 25))\r\n\r\n  instanceBtn.addEventListener(\"click\", function () {\r\n    previewOn = !previewOn\r\n\r\n    if (previewOn) {\r\n      fadeOut(editInst, function () {\r\n        triggerUpdate(getEditState(), true, true)\r\n        instanceBtn.firstChild.src = editB64\r\n        fadeIn(readerInst)\r\n      })\r\n    } else {\r\n      fadeOut(readerInst, function () {\r\n        instanceBtn.firstChild.src = previewB64\r\n        fadeIn(editInst)\r\n      })\r\n    }\r\n  })\r\n  return instanceBtn\r\n}\r\n\r\n","\r\nimport { readerElms } from \"../reader/NxReader.js\"\r\nimport {\r\n  appHeaderWithLang,\r\n  getElm,\r\n  instanceWrap,\r\n  serviceWrap,\r\n} from \"../shared/NxCommons.js\"\r\nimport {\r\n  editDistantBlock,\r\n  authorBlock,\r\n  editIndexBlock,\r\n  editLocalBlock,\r\n  setEditState,\r\n  getEditState,\r\n} from \"./NxEdit.js\"\r\nimport { getEditMenu } from \"./NxEditMenu.js\"\r\nimport { instanceSwitch } from \"./NxEditSwitch.js\"\r\n\r\nexport function editorElms(seed) {\r\n  setEditState(seed.state, seed.nxelm)\r\n  var indexMain = getElm(\"DIV\", \"nx-main-block nx-index\")\r\n  indexMain.append(authorBlock(), editIndexBlock())\r\n  var threadMain = getElm(\"DIV\", \"nx-main-block nx-thread\")\r\n  threadMain.append(editLocalBlock(), editDistantBlock())\r\n\r\n  var editInst = instanceWrap(appHeaderWithLang(), [\r\n    serviceWrap([getEditMenu()], [indexMain, threadMain], [], \"edit\"),\r\n  ])\r\n\r\n  var seed = {\r\n    editMode: true,\r\n    state: Object.assign({}, getEditState()),\r\n  }\r\n  var readerInst = readerElms(seed)\r\n  readerInst.style.display = \"none\"\r\n  var switchBtn = instanceSwitch(editInst, readerInst)\r\n\r\n  var editor = getElm(\"DIV\", \"nx-editor\")\r\n  editor.append(editInst, readerInst, switchBtn)\r\n  return editor\r\n}\r\n"],"names":[],"sourceRoot":""}