{"version":3,"file":"js/NxIOEdit.js","mappings":";;;;;;;;;;;;;;;;AAA2E;AAC5B;AAC/C;AACO;AACP,YAAY,4DAAM;AAClB;AACA;AACA;AACA;AACA;AACO;AACP;AACA,MAAM,sFAAW;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACnB+E;AACK;AACpF;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACA;AACA;AACA;AACP;AACO;AACP;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACO;AACP,kBAAkB,IAAI,sGAA2B,EAAE;AACnD,qBAAqB,+FAAoB;AACzC,aAAa,+FAAoB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,SAAS,8FAAiB;AAC1B;AACA;AACA;AACA;AACA;AACO;AACP;AACA,oBAAoB,qBAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AC7EuE;AAKd;AAU7B;AACsB;AACD;AAC2B;AACnC;AACG;AACO;AACM;AACzD;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,kDAAK;AACf,YAAY,oDAAO;AACnB;AACA;AACA;AACA;AACA;AACA,cAAc,yDAAM;AACpB,aAAa,yDAAM;AACnB,aAAa,yDAAM;AACnB,eAAe,yDAAM;AACrB;AACA;AACA;AACA;AACA,wBAAwB,mDAAU;AAClC;AACA;AACA;AACA;AACA;AACA,6BAA6B,6DAAe;AAC5C,gCAAgC,mEAAkB;AAClD;AACA;AACA;AACA,wBAAwB,iDAAM;AAC9B,IAAI,wDAAY;AAChB;AACA;AACA;AACA;AACA,oBAAoB,yDAAM;AAC1B;AACA,qBAAqB,yDAAM;AAC3B;AACA;AACA,wBAAwB,+DAAY,CAAC,oEAAiB;AACtD,MAAM,8DAAW;AACjB;AACA;AACA;AACA;AACA;AACA,cAAc,4DAAS,qCAAqC,8DAAW;AACvE,aAAa,4DAAS;AACtB;AACA;AACA,QAAQ,8DAAW;AACnB;AACA,aAAa,4DAAS;AACtB,eAAe,4DAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wFAAK;AACb;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,wFAAK;AACX,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,kBAAkB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wFAAM;AACd,QAAQ;AACR;AACA;AACA;AACA;AACA,kEAAkE,qDAAS;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,sFAAY;AACjC;AACA,gCAAgC,0DAAS;AACzC;AACA;AACA,MAAM,wDAAY;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yDAAM;AACzB,kBAAkB;AAClB;AACA;AACA,kBAAkB,yDAAM;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,uFAAK;AACf;AACA,WAAW;AACX;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,YAAY,wFAAM;AAClB,YAAY;AACZ;AACA;AACA,YAAY,wFAAK;AACjB;AACA;AACA,QAAQ,uDAAY;AACpB,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,eAAe,yDAAM;AACrB,qBAAqB,iDAAM;AAC3B,IAAI,wDAAY;AAChB;AACA;AACA;AACA,QAAQ,yFAAM;AACd,QAAQ,wDAAY;AACpB;AACA,KAAK;AACL;AACA;AACA;AACA,sBAAsB,iBAAiB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,yDAAM;AACxB,mBAAmB,8DAAW;AAC9B;AACA;AACA;AACA;AACA;AACA,aAAa,yDAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,uFAAK;AACjB,WAAW;AACX,UAAU;AACV,UAAU,uFAAK;AACf;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,cAAc,yDAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,wFAAK;AACf;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,kCAAkC,qDAAS;AAC3C;AACA;AACA;AACA;AACA;AACA,qCAAqC,2DAAe;AACpD,mCAAmC,2DAAe;AAClD;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,+BAA+B,qDAAS;AACxC;AACA,UAAU;AACV;AACA;AACA,qDAAqD,qDAAS;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wFAAK;AACb;AACA;AACA,MAAM,uDAAY;AAClB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,cAAc,yDAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,+DAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,2DAAe;AAC9C,SAAS;AACT;AACA,+BAA+B,2DAAe;AAC9C,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,8DAAc;AACpB,MAAM;AACN,MAAM,8DAAc;AACpB;AACA;AACA,MAAM,8DAAc;AACpB,MAAM;AACN,MAAM,8DAAc;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,qDAAS;AACrC,0BAA0B,qDAAS;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yDAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,gBAAgB,yDAAM;AACtB,qBAAqB,4DAAS;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,cAAc,yDAAM;AACpB;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACnduF;AACrB;AACc;AACL;AACiB;AAS/D;AACiD;AACD;AACV;AACZ;AACvD;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,mEAAY;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,iEAAc;AACpB;AACA;AACA,cAAc,6FAAM;AACpB;AACA;AACA;AACA,IAAI,4FAAU;AACd;AACA;AACA,QAAQ,6FAAU;AAClB,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,2DAAO;AACpB;AACA,gBAAgB,4DAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,8BAA8B,6DAAc;AAC5C;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4DAAM;AAC7B;AACA;AACA;AACA;AACA,iBAAiB,4DAAM;AACvB,sBAAsB,+DAAS,CAAC,2DAAW;AAC3C;AACA;AACA;AACA,mCAAmC;AACnC;AACA,oBAAoB,0FAAS;AAC7B;AACA;AACA;AACA;AACA,sCAAsC;AACtC,qBAAqB,4DAAM;AAC3B;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,kBAAkB,4DAAM;AACxB,uBAAuB,+DAAS,CAAC,sDAAM;AACvC;AACA;AACA;AACA,wBAAwB,2DAAO;AAC/B,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,mBAAmB,4DAAM;AACzB,wBAAwB,+DAAS,CAAC,uDAAO;AACzC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oBAAoB,4DAAM;AAC1B;AACA;AACA;AACA;AACA,qBAAqB,4DAAM;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uFAAW;AACnB;AACA,0BAA0B,yFAAc;AACxC;AACA,WAAW;AACX;AACA,YAAY,iFAAM;AAClB;AACA,WAAW;AACX;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,mBAAmB,4DAAM;AACzB,wBAAwB,+DAAS,CAAC,uDAAO;AACzC;AACA;AACA;AACA;AACA;AACA,YAAY,+FAAgB;AAC5B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,iEAAc;AAClB;AACA;AACA;AACA,oBAAoB,4DAAM;AAC1B,yBAAyB,+DAAS,CAAC,wDAAQ;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,kEAAc;AACxB;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,4DAAM;AAC3B;AACA,mBAAmB,4DAAM;AACzB;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,gBAAgB,QAAQ,uDAAO,aAAa;AAC5C,gBAAgB,QAAQ,uDAAO,aAAa;AAC5C,OAAO;AACP;AACA;AACA;AACA,uBAAuB,4DAAM;AAC7B,IAAI,yEAAkB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAM;AACtB;AACA;AACA;;;;;;;;;;;;;;;;;;;ACxPqF;AACZ;AACzE;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,iBAAiB,yFAAY;AAC7B;AACA,WAAW,oFAAM;AACjB;AACA,6BAA6B,sFAAS;AACtC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC3C0F;AACrB;AACK;AACyB;AACpD;AACK;AACpD;AACO;AACP;AACA;AACA;AACA;AACA;AACA,QAAQ,oFAAQ;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gGAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,eAAe,wDAAO;AACtB;AACA;AACA;AACA;AACA;AACA,mBAAmB,yFAAc;AACjC;AACA;AACA,MAAM,+FAAgB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,iBAAiB,yDAAQ;AACzB,yBAAyB,qBAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,4DAAW;AACtB;AACA;AACA;AACA,iCAAiC;AACjmBAAmB,2FAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,sFAAY;AAC5B,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,sFAAY;AAC9B,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC9Z+E;AACrB;AACA;AAC1D;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,uFAAK;AACX;AACA,0CAA0C,uDAAO;AACjD,UAAU,wFAAK;AACf,SAAS;AACT,OAAO;AACP,MAAM;AACN,MAAM,uFAAK;AACX,wCAAwC,0DAAU;AAClD,QAAQ,wFAAK;AACb,OAAO;AACP;AACA;AACA;AACA;AACA,qBAAqB,4DAAM;AAC3B,0BAA0B,+DAAS,CAAC,0DAAU;AAC9C;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC3CkD;AACH;AACK;AACJ;AACI;AACN;AAC9C;AACO;AACP,sBAAsB,wDAAW;AACjC,yBAAyB,8DAAc;AACvC;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,mBAAmB,+DAAU;AAC7B;AACA;AACA;AACA,GAAG,kEAAa;AAChB;AACA;AACA,CAAC;AACD;AACA,uBAAuB,0DAAY;AACnC;AACA;AACA,eAAe,4DAAM;AACrB;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACjCsE;AACQ;AACU;AAMlC;AACsB;AACL;AACf;AACJ;AACpD;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yDAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,qFAAU;AAChC;AACA;AACA;AACA,sBAAsB,qFAAU;AAChC;AACA;AACA;AACA,sBAAsB,oFAAS;AAC/B;AACA;AACA,4BAA4B,mGAAwB;AACpD;AACA;AACA;AACA;AACA,qBAAqB,qFAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yDAAM;AACrB;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8FAAmB;AACnC,WAAW,iEAAc;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,yDAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,yDAAM;AACpB;AACA;AACA;AACA;AACA,cAAc,yDAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yDAAM;AACnB;AACA,gBAAgB,yDAAM;AACtB,wBAAwB,6FAAM;AAC9B,IAAI,wGAAiB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa,yDAAM;AACnB,cAAc,4DAAS,CAAC,uDAAU;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2FAAU;AACxB;AACA,gBAAgB,wDAAQ;AACxB;AACA;AACA;AACA;AACA;AACA,yBAAyB,qFAAU;AACnC;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,MAAM;AACN,gBAAgB,wDAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,gBAAgB,uDAAU;AAC1B;AACA,cAAc,qDAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,OAAO;AACP;AACA;AACA;;;;;;;;;;;;;;;;;AC3PyD;AACQ;AACjE;AACO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,yDAAM;AACrB;AACA;AACA;AACA;AACA;AACA,MAAM,8DAAW;AACjB;AACA,MAAM,8DAAW;AACjB;AACA,MAAM,8DAAW;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,yDAAM;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,yDAAM;AAC1B;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB,yDAAM;AAC1B;AACA,kBAAkB;AAClB;AACA;AACA;AACA,0BAA0B,gEAAgB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,yDAAa;AAChD;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://nexus-io/./src/editor/NxAddBtn.js","webpack://nexus-io/./src/editor/NxEditCommons.js","webpack://nexus-io/./src/editor/NxEditInstance.js","webpack://nexus-io/./src/editor/NxEditMenu.js","webpack://nexus-io/./src/editor/NxEditStarters.js","webpack://nexus-io/./src/editor/NxEditState.js","webpack://nexus-io/./src/editor/NxEditSwitch.js","webpack://nexus-io/./src/editor/NxEditor.js","webpack://nexus-io/./src/editor/NxInputsFactory.js","webpack://nexus-io/./src/editor/NxLocalFormFactory.js"],"sourcesContent":["import { itemsMinMax } from '@i-is-as-i-does/nexus-core/src/validt/NxSpecs'\r\nimport { getElm } from '../shared/NxCommons.js'\r\n\r\nexport function addBtn() {\r\n  var btn = getElm('BUTTON', 'nx-add-link')\r\n  btn.type = 'button'\r\n  btn.textContent = '+'\r\n  return btn\r\n}\r\n\r\nexport function toggleAddBtn(btn, haystack, itemsKey) {\r\n  var disabled = false\r\n  if (itemsMinMax[itemsKey][1] <= haystack.length) {\r\n    disabled = true\r\n  }\r\n  if (btn.disabled !== disabled) {\r\n    btn.classList.toggle('nx-disabled')\r\n    btn.disabled = disabled\r\n  }\r\n}\r\n","import { replaceDiacritics } from '@i-is-as-i-does/jack-js/src/modules/Help.js'\r\nimport { supportedOembedMedia } from '@i-is-as-i-does/nexus-core/src/validt/NxSpecs'\r\n\r\nexport const mediaGuessMap = {\r\n  image: ['jpg', 'jpeg', 'gif', 'svg', 'png', 'webp'],\r\n  video: ['mp4', 'webm'],\r\n  audio: ['mp3'],\r\n}\r\n\r\nexport const autoUpdateEvt = new CustomEvent('AutoUpdate')\r\nexport const stateChangeEvt = new CustomEvent('StateChange')\r\nexport const threadChangeEvt = new CustomEvent('ThreadChange')\r\nexport const updownEvt = new CustomEvent('IndexChange')\r\n\r\nexport function toggleDisabled(elm, disabled = false) {\r\n  var hasDisbClass = elm.classList.contains('nx-disabled')\r\n  if (!disabled && hasDisbClass) {\r\n    elm.classList.remove('nx-disabled')\r\n  } else if (disabled && !hasDisbClass) {\r\n    elm.classList.add('nx-disabled')\r\n  }\r\n}\r\n\r\nexport function resolveMediaType(val) {\r\n  for (var p = 0; p < supportedOembedMedia.length; p++) {\r\n    if (val.includes(supportedOembedMedia[p])) {\r\n      return supportedOembedMedia[p]\r\n    }\r\n  }\r\n  var ext = val.split('.').pop()\r\n  for (let [type, exts] of Object.entries(mediaGuessMap)) {\r\n    if (exts.includes(ext)) {\r\n      return type\r\n    }\r\n  }\r\n\r\n  return 'page'\r\n}\r\n\r\nexport function convertToId(title) {\r\n  return replaceDiacritics(title)\r\n    .trim()\r\n    .replace(/[^A-Za-z0-9]+/g, '-')\r\n    .replace(/(^-|-$)+/g, '')\r\n}\r\n\r\nexport function isUnique(haystack, needle, excludeIdx) {\r\n  if (haystack.indexOf(needle) !== -1) {\r\n    for (var c = 0; c < haystack.length; c++) {\r\n      if (c !== excludeIdx && haystack[c] === needle) {\r\n        return false\r\n      }\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\nexport function uniqueId(idsList, id, idx) {\r\n  id = convertToId(id)\r\n  if (!isUnique(idsList, id, idx)) {\r\n    var sp = id.split('-')\r\n    var last = sp.pop()\r\n    var incr\r\n    if (!isNaN(last)) {\r\n      incr = parseInt(last)\r\n      incr++\r\n    } else {\r\n      sp.push(last)\r\n      incr = 1\r\n    }\r\n    id = sp.join('-')\r\n    while (idsList.includes(id + '-' + incr)) {\r\n      incr++\r\n    }\r\n    id += '-' + incr\r\n  }\r\n  return id\r\n}\r\n","import { randomString } from '@i-is-as-i-does/jack-js/src/modules/Help'\r\nimport {\r\n  vHide,\r\n  vShow,\r\n  vPlace,\r\n} from '@i-is-as-i-does/valva/src/modules/transitions.js'\r\nimport {\r\n  appHeaderWithLang,\r\n  baseViewLink,\r\n  blockWrap,\r\n  getElm,\r\n  iconImage,\r\n  instanceWrap,\r\n  landmarkElm,\r\n  serviceWrap,\r\n} from '../shared/NxCommons'\r\nimport { downB64, upB64 } from '../shared/NxIcons'\r\nimport { addBtn, toggleAddBtn } from './NxAddBtn'\r\nimport { threadChangeEvt, toggleDisabled, updownEvt } from './NxEditCommons'\r\nimport { NxEditMenu } from './NxEditMenu'\r\nimport { newThread } from './NxEditStarters'\r\nimport { NxInputsFactory } from './NxInputsFactory'\r\nimport { NxLocalFormFactory } from './NxLocalFormFactory'\r\n\r\nexport class NxEditInstance {\r\n  constructor(EditState) {\r\n    this.EditState = EditState\r\n\r\n    this._setContainers()\r\n    this._setBtnSrc()\r\n\r\n    this._setMenu()\r\n\r\n    this._setFactories()\r\n    this._setAddThreadBtn()\r\n    this._setFormsInputs()\r\n\r\n    this._setFormBlocks()\r\n    this._setServiceElms()\r\n  }\r\n\r\n  getInstanceElms() {\r\n    return this.instanceElms\r\n  }\r\n\r\n  _setBtnSrc() {\r\n    this.btnSrc = {\r\n      up: upB64,\r\n      down: downB64,\r\n    }\r\n  }\r\n\r\n  _setContainers() {\r\n    this.containers = {\r\n      author: getElm('FORM', 'nx-edit-author'),\r\n      index: getElm('UL', 'nx-edit-index'),\r\n      local: getElm('UL', 'nx-edit-local'),\r\n      distant: getElm('UL', 'nx-edit-distant'),\r\n    }\r\n  }\r\n\r\n  _setMenu() {\r\n    this.EditMenu = new NxEditMenu(this.EditState)\r\n    this.menu = this.EditMenu.getMenuElms()\r\n    this.menu.addEventListener('StateChange', this._resetFormCallback.bind(this))\r\n  }\r\n\r\n  _setFactories() {\r\n    this.InputsFactory = new NxInputsFactory(this.EditState, this.EditMenu)\r\n    this.LocalFormFactory = new NxLocalFormFactory(this.InputsFactory)\r\n  }\r\n\r\n  _setAddThreadBtn() {\r\n    this.addThreadBtn = addBtn()\r\n    toggleAddBtn(this.addThreadBtn, this.EditState.getIdsList(), 'threads')\r\n    this.addThreadBtn.addEventListener('click', this._addThreadHandler.bind(this))\r\n  }\r\n\r\n  _setServiceElms() {\r\n    var indexMain = getElm('DIV', 'nx-main-block nx-index')\r\n    indexMain.append(this.formBlocks.author, this.formBlocks.index)\r\n    var threadMain = getElm('DIV', 'nx-main-block nx-thread')\r\n    threadMain.append(this.formBlocks.local, this.formBlocks.distant)\r\n\r\n    this.instanceElms = instanceWrap(appHeaderWithLang(), [\r\n      serviceWrap([this.menu], [indexMain, threadMain], [], 'edit'),\r\n    ])\r\n  }\r\n\r\n  _setFormBlocks() {\r\n    this.formBlocks = {\r\n      author: blockWrap('author', [this.containers.author], landmarkElm('author')),\r\n      index: blockWrap(\r\n        'threads-list',\r\n        [this.containers.index, this.addThreadBtn],\r\n        landmarkElm('threads')\r\n      ),\r\n      local: blockWrap('local', [this.containers.local], false),\r\n      distant: blockWrap('distant', [this.containers.distant], false),\r\n    }\r\n  }\r\n\r\n  _resetFormCallback() {\r\n\r\n    Object.values(this.containers).forEach((container, i) => {\r\n      var childr = Array.from(container.childNodes)\r\n      var isLastp = i === 3\r\n      var lastc = childr.length - 1\r\n      childr.forEach((child, c) => {\r\n        vHide(child, 'fade', 200, function(){\r\n          child.remove()\r\n          if (isLastp && c === lastc) {\r\n            this._setFormsInputs()\r\n          }\r\n        }.bind(this))\r\n      })\r\n    })\r\n  }\r\n\r\n  _setFormsInputs() {\r\n    this._setAuthorInputs()\r\n    this._setThreadsInputs()\r\n  }\r\n\r\n  _setAuthorInputs() {\r\n    var fields = ['handle', 'url', 'about']\r\n    fields.forEach((field) => {\r\n      var inpt = this.InputsFactory.inputElm(['author', field])\r\n      inpt.style.display = 'none'\r\n      this.containers.author.append(inpt)\r\n      vShow(inpt, 'fade', 200)\r\n    })\r\n  }\r\n\r\n  _setThreadsInputs() {\r\n    var items = this.EditState.getIdsList()\r\n    if (items.length) {\r\n      var isLast = false\r\n      for (var i = 0; i < items.length; i++) {\r\n        if (i === items.length - 1) {\r\n          isLast = true\r\n        }\r\n        this._setThread(items[i], i, isLast)\r\n      }\r\n    }\r\n  }\r\n\r\n  _setThread(id, idx, isLast = false) {\r\n    var ident = this.EditState.newIdent(id, idx)\r\n    var elms = this._newThreadLis(ident)\r\n    for (let [name, elm] of Object.entries(elms)) {\r\n      if (elm.style.display !== 'none') {\r\n        elm.style.display = 'none'\r\n        var type = 'ease'\r\n          if (name === 'local') {\r\n            type = 'fade'\r\n          } \r\n        vPlace(this.containers[name], elm, false, type, 200)\r\n      } else {\r\n        this.containers[name].append(elm)\r\n      }\r\n     \r\n      if (isLast && name === \"index\" && (idx - 1) !== -1) {\r\n          this.containers.index.childNodes[idx - 1].dispatchEvent(updownEvt)\r\n      }\r\n    }\r\n  }\r\n\r\n  _newThreadLis(ident) {\r\n    var elms = {}\r\n\r\n    elms.distant = this._threadLi(ident)\r\n    elms.local = this._threadLi(ident)\r\n    elms.index = this._indexLi(ident)\r\n\r\n    elms.distant.append(this._threadDistantForm(ident))\r\n    elms.local.append(this.LocalFormFactory.newThreadLocalForm(ident, elms.index))\r\n\r\n    this._setdeleteThreadElm(elms, ident)\r\n    return elms\r\n  }\r\n\r\n  _addThreadHandler() {\r\n    if (!this.addThreadBtn.disabled) {\r\n      var randomId = randomString(10)\r\n      var idx = this.EditState.getThreadsCount()\r\n      this.EditState.pushThread(newThread(randomId))\r\n      this._setThread(randomId, idx, true)\r\n      this.EditMenu.toggleSaveBtn(false)\r\n      toggleAddBtn(this.addThreadBtn, this.EditState.getIdsList(), 'threads')\r\n    }\r\n  }\r\n\r\n  _linkInput(addLinkBtn, form, ident, i) {\r\n    var lkident = this.EditState.registerLinkedThread(ident, i)\r\n\r\n    var linkwrap = getElm('DIV', 'nx-edit-distant-link')\r\n    var store = { linked: null }\r\n    var elm = this.InputsFactory.inputElm(['threads', ident, 'linked', lkident], null, store)\r\n    var dltBtn = this._baseDeleteLinkBtn()\r\n    var delwrap = getElm('DIV', 'nx-distant-link-action')\r\n    delwrap.append(dltBtn)\r\n\r\n    dltBtn.addEventListener('click', () => {\r\n      var act = function (redo) {\r\n        var linked = this.EditState.getLinkedUrls(ident)\r\n        if (redo) {\r\n          vHide(linkwrap, 'ease', 200, function () {\r\n            linkwrap.remove()\r\n          })\r\n          this.EditState.removeLinkedThread(ident, lkident)\r\n        } else {\r\n          var lidx = this.EditState.getLinkedThreadIdx(ident, lkident)\r\n          var isLast = lidx === linked.length\r\n          this.EditState.insertLinkedThread(ident, lkident, store.linked.value)\r\n          if (isLast) {\r\n            vPlace(form, linkwrap, false, 'ease', 200)\r\n          } else {\r\n            var nextSibling = form.childNodes[lidx]\r\n            form.insertBefore(linkwrap, nextSibling)\r\n            vShow(linkwrap, 'ease', 200)\r\n          }\r\n        }\r\n        toggleAddBtn(addLinkBtn, linked, 'linked')\r\n      }.bind(this)\r\n      this.EditMenu.setLastAction(act)\r\n      act(true)\r\n    })\r\n    linkwrap.append(elm, delwrap)\r\n    return linkwrap\r\n  }\r\n\r\n  _threadDistantForm(ident) {\r\n    var form = getElm('FORM', 'nx-thread-distant-form')\r\n    var addLinkBtn = addBtn()\r\n    toggleAddBtn(addLinkBtn, this.EditState.getLinkedUrls(ident), 'linked')\r\n    addLinkBtn.addEventListener('click', () => {\r\n      if (!addLinkBtn.disabled) {\r\n        this.EditState.pushLinkedThread(ident, '')\r\n        vPlace(form, this._linkInput(addLinkBtn, form, ident, this.EditState.getLinkedUrlsCount(ident) - 1),false, 'ease', 200)\r\n        toggleAddBtn(addLinkBtn, this.EditState.getLinkedUrls(ident), 'linked')\r\n      }\r\n    })\r\n    var linkedCount = this.EditState.getLinkedUrlsCount(ident)\r\n    if (linkedCount) {\r\n      var elms = []\r\n      for (var i = 0; i < linkedCount; i++) {\r\n        var elm = this._linkInput(addLinkBtn, form, ident, i)\r\n        elms.push(elm)\r\n      }\r\n      form.append(...elms)\r\n    }\r\n\r\n    var formCnt = getElm('DIV')\r\n    formCnt.append(landmarkElm('linked threads'), form, addLinkBtn)\r\n\r\n    return formCnt\r\n  }\r\n\r\n  _threadLi(ident) {\r\n    var li = getElm('LI')\r\n\r\n    if (!this.EditState.isCurrentId(ident)) {\r\n      li.style.display = 'none'\r\n    }\r\n    li.addEventListener(\r\n      'ThreadChange',\r\n      function () {\r\n        if (this.EditState.isCurrentId(ident)) {\r\n          setTimeout(function () {\r\n            vShow(li, 'ease', 200)\r\n          }, 200)\r\n        } else {\r\n          vHide(li, 'ease', 200)\r\n        }\r\n      }.bind(this)\r\n    )\r\n    return li\r\n  }\r\n\r\n  _setdeleteThreadElm(elms, ident) {\r\n    var btn = getElm('BUTTON', 'nx-delete-thread')\r\n    btn.type = 'button'\r\n    btn.textContent = '-'\r\n\r\n    btn.addEventListener(\r\n      'click',\r\n      function () {\r\n        this._deleteEvent(elms, ident)\r\n      }.bind(this)\r\n    )\r\n    elms.index.append(btn)\r\n  }\r\n\r\n\r\n  _deleteEvent(elms, ident) {\r\n    var threadData = Object.assign({}, this.EditState.getThreadData(ident))\r\n    var act = function (redo) {\r\n      var idx = this.EditState.getThreadIdx(ident)\r\n      var len = this.EditState.getThreadsCount()\r\n\r\n      if (redo) {\r\n\r\n        this.EditState.removeThread(ident)\r\n\r\n        Object.values(elms).forEach((elm) => {\r\n          vHide(elm, 'ease', 200, function () {\r\n            elm.remove()\r\n          })\r\n        })\r\n     \r\n        if (len > 1) {\r\n          var sibling = null\r\n\r\n          if (idx === 0) {\r\n            sibling = elms.index.nextSibling\r\n          } else if (idx === len - 1) {\r\n            sibling = elms.index.previousSibling\r\n          }\r\n          if(sibling){\r\n            sibling.dispatchEvent(updownEvt)\r\n\r\n          }\r\n        }\r\n\r\n        if (this.EditState.isCurrentId(ident)) {\r\n          elms.distant.dispatchEvent(threadChangeEvt)\r\n          elms.local.dispatchEvent(threadChangeEvt)\r\n        }\r\n      } else {\r\n        this.EditState.insertThread(ident, threadData)\r\n        if (idx <= len - 1) {\r\n          var next = this.containers.index.childNodes[idx]\r\n          this.containers.index.insertBefore(elms.index, next)\r\n          if (idx === 0) {\r\n            next.dispatchEvent(updownEvt)\r\n          }\r\n        } else {\r\n          this.containers.index.append(elms.index)\r\n          if (len > 1) {\r\n            elms.index.previousSibling.dispatchEvent(updownEvt)\r\n          }\r\n        }\r\n\r\n        this.containers.local.append(elms.local)\r\n        this.containers.distant.append(elms.distant)\r\n\r\n        vShow(elms.index, 'ease', 200)\r\n        elms.index.firstChild.click()\r\n      }\r\n      toggleAddBtn(this.addThreadBtn, this.EditState.getIdsList(), 'threads')\r\n    }.bind(this)\r\n    this.EditMenu.setLastAction(act)\r\n    act(true)\r\n  }\r\n\r\n  _indexLi(ident) {\r\n    var elm = getElm('LI')\r\n    elm.dataset.ident = ident\r\n    elm.append(this._indexLink(ident))\r\n    this._setMoveBtns(elm, ident)\r\n    return elm\r\n  }\r\n\r\n  _indexLink(ident) {\r\n    var itemState = this.EditState.getAltEditState(ident)\r\n    var indLk = baseViewLink(itemState, false)\r\n    if (this.EditState.isCurrentId(ident)) {\r\n      indLk.classList.add('nx-on-display')\r\n    }\r\n\r\n    indLk.addEventListener('click', () => {\r\n      if (!this.EditState.isCurrentId(ident)) {\r\n        this.EditState.changeCurrentThread(ident)\r\n        var prev = this.containers.index.querySelector('.nx-on-display')\r\n        if (prev) {\r\n          prev.classList.remove('nx-on-display')\r\n        }\r\n        indLk.classList.add('nx-on-display')\r\n        this.containers.local.childNodes.forEach((lchild) => {\r\n          lchild.dispatchEvent(threadChangeEvt)\r\n        })\r\n        this.containers.distant.childNodes.forEach((dchild) => {\r\n          dchild.dispatchEvent(threadChangeEvt)\r\n        })\r\n      }\r\n    })\r\n\r\n    return indLk\r\n  }\r\n\r\n  _toggleActiveBtn(ident, btn) {\r\n    if (this.EditState.isFirstThread(ident)) {\r\n      toggleDisabled(btn['up'], true)\r\n    } else {\r\n      toggleDisabled(btn['up'], false)\r\n    }\r\n    if (this.EditState.isLastThread(ident)) {\r\n      toggleDisabled(btn['down'], true)\r\n    } else {\r\n      toggleDisabled(btn['down'], false)\r\n    }\r\n  }\r\n\r\n  _permuteThread(goingUp, goingDown) {\r\n    this.containers.index.removeChild(goingUp)\r\n    this.containers.index.insertBefore(goingUp, goingDown)\r\n    goingDown.dispatchEvent(updownEvt)\r\n    goingUp.dispatchEvent(updownEvt)\r\n  }\r\n\r\n  _moveItemHandler(li, it, ident) {\r\n    var act = function (redo) {\r\n      var isUp = it == 'up'\r\n      if (!redo) {\r\n        isUp = !isUp\r\n      }\r\n      var sibling\r\n      if (isUp && !this.EditState.isFirstThread(ident)) {\r\n        sibling = li.previousSibling\r\n        this.EditState.moveThread(ident, sibling.dataset.ident, true)\r\n        this._permuteThread(li, sibling)\r\n      } else if (!isUp && !this.EditState.isLastThread(ident)) {\r\n        sibling = li.nextSibling\r\n        this.EditState.moveThread(ident, sibling.dataset.ident, false)\r\n        this._permuteThread(sibling, li)\r\n      }\r\n    }.bind(this)\r\n\r\n    this.EditMenu.setLastAction(act)\r\n    act(true)\r\n  }\r\n\r\n  _setMoveBtns(li, ident) {\r\n    var dv = getElm('DIV', 'nx-edit-move')\r\n    var btn = {\r\n      up: null,\r\n      down: null,\r\n    }\r\n    li.addEventListener(\r\n      'IndexChange',\r\n      function () {\r\n        this._toggleActiveBtn(ident, btn)\r\n      }.bind(this)\r\n    )\r\n    Object.keys(btn).forEach((it) => {\r\n      btn[it] = getElm('A', 'nx-edit-move-' + it)\r\n      btn[it].append(iconImage(this.btnSrc[it], 16))\r\n      dv.append(btn[it])\r\n\r\n      btn[it].addEventListener(\r\n        'click',\r\n        function () {\r\n          this._moveItemHandler(li, it, ident)\r\n        }.bind(this)\r\n      )\r\n    })\r\n    this._toggleActiveBtn(ident, btn)\r\n    li.append(dv)\r\n  }\r\n\r\n  _baseDeleteLinkBtn() {\r\n    var btn = getElm('BUTTON', 'nx-delete-link')\r\n    btn.type = 'button'\r\n    btn.textContent = '-'\r\n    return btn\r\n  }\r\n}\r\n","import { getThreadsList, loadSrcFile } from '@i-is-as-i-does/nexus-core/src/load/NxSrc'\r\nimport { logErr } from '@i-is-as-i-does/nexus-core/src/logs/NxLog'\r\nimport { registerEditData } from '@i-is-as-i-does/nexus-core/src/storg/NxMemory'\r\nimport { validData } from '@i-is-as-i-does/nexus-core/src/validt/NxStamper'\r\nimport { getElm, iconImage, setHistoryControls, toggleNavEnd } from '../shared/NxCommons.js'\r\nimport {\r\n  downloadB64,\r\n  newB64,\r\n  openB64,\r\n  redoB64,\r\n  resetB64,\r\n  saveB64,\r\n  undoB64,\r\n} from '../shared/NxIcons.js'\r\nimport { getTxt } from '@i-is-as-i-does/nexus-core/src/transl/NxCoreTranslate'\r\nimport { vSplitFlap } from '@i-is-as-i-does/valva/src/modules/transitions.js'\r\nimport { stateChangeEvt, toggleDisabled } from './NxEditCommons.js'\r\nimport { newData, newState } from './NxEditStarters.js'\r\n\r\nexport class NxEditMenu {\r\n  constructor(EditState) {\r\n    this.EditState = EditState\r\n    this._setMenu()\r\n  }\r\n\r\n  getMenuElms() {\r\n    return this.menu\r\n  }\r\n\r\n  setLastAction(callback, bypass = false) {\r\n    if (!this.resetting || bypass) {\r\n      this.lastAction.act = callback\r\n      this.actCtrls.count = 2\r\n      this.actCtrls.position = 1\r\n      toggleNavEnd(this.actCtrls)\r\n      this.toggleSaveBtn(false)\r\n    }\r\n  }\r\n  setResetting(bool) {\r\n    this.resetting = bool\r\n  }\r\n\r\n  toggleSaveBtn(disabled = false) {\r\n      toggleDisabled(this.saveBtn, disabled)\r\n  }\r\n  _displayFeedback(msg) {\r\n    var txt = getTxt(msg)\r\n    if (this.feedbackrun) {\r\n      clearTimeout(this.feedbackrun)\r\n    }\r\n    vSplitFlap(this.actionFdbck, txt, 25)\r\n    this.feedbackrun = setTimeout(\r\n      function () {\r\n        vSplitFlap(this.actionFdbck, '', 25)\r\n      }.bind(this),\r\n      1500 + txt.length * 20\r\n    )\r\n  }\r\n\r\n  _resetData(data, url) {\r\n    var prvState = this.EditState.getJsonState()\r\n    if (data === null) {\r\n      data = newData()\r\n    }\r\n    var state = newState(data, url)\r\n    if (state.srcData.threads.length) {\r\n      state.threadIndex = 0\r\n      state.threadId = state.srcData.threads[0].id\r\n    }\r\n    var nxtState = JSON.stringify(state)\r\n    var act = function (redo) {\r\n      this.resetting = true\r\n      var nstate\r\n      if (redo) {\r\n        nstate = nxtState\r\n      } else {\r\n        nstate = prvState\r\n      }\r\n  \r\n      this.EditState.setNewState(nstate)\r\n      this.menu.dispatchEvent(stateChangeEvt)\r\n      this.filename = this.EditState.resolveFilename()\r\n      this.resetting = false\r\n    }.bind(this)\r\n    act(true)\r\n    this.setLastAction(act, true)\r\n  }\r\n\r\n  _setActionFeedback() {\r\n    this.feedbackrun = null\r\n    this.actionFdbck = getElm('SPAN', 'nx-action-feedback')\r\n  }\r\n\r\n  _setDownloadBtn() {\r\n    this.filename = 'nexus.json'\r\n    this.dlBtn = getElm('A', 'nx-download')\r\n    this.dlBtn.append(iconImage(downloadB64, 20))\r\n    this.dlBtn.addEventListener(\r\n      'click',\r\n      function () {\r\n        var data = Object.assign({}, this.EditState.state.srcData)\r\n        delete data.index\r\n        var check = validData(data)\r\n        if (!check) {\r\n          this._displayFeedback('Invalid Nexus data')\r\n        }\r\n        data = JSON.stringify(data, undefined, 2)\r\n        var dataStr = 'data:text/json;charset=utf-8,' + encodeURIComponent(data)\r\n        var anchor = getElm('A')\r\n        anchor.setAttribute('href', dataStr)\r\n        anchor.setAttribute('download', 'nexus.json')\r\n        document.body.appendChild(anchor)\r\n        anchor.click()\r\n        anchor.remove()\r\n      }.bind(this)\r\n    )\r\n  }\r\n\r\n  _setNewDocumenBtn() {\r\n    this.newBtn = getElm('A', 'nx-new')\r\n    this.newBtn.append(iconImage(newB64, 20))\r\n    this.newBtn.addEventListener(\r\n      'click',\r\n      function () {\r\n        this._resetData(newData(), 'nexus.json')\r\n      }.bind(this)\r\n    )\r\n  }\r\n\r\n  _setOpenBtn() {\r\n    this._setFileInput()\r\n    this.openBtn = getElm('A', 'nx-open-file')\r\n    this.openBtn.append(iconImage(openB64, 20))\r\n    this.openBtn.addEventListener(\r\n      'click',\r\n      function () {\r\n        this.fileInput.click()\r\n      }.bind(this)\r\n    )\r\n    this.openWrap = getElm('SPAN')\r\n    this.openWrap.append(this.fileInput, this.openBtn)\r\n  }\r\n\r\n  _setFileInput() {\r\n    this.fileInput = getElm('INPUT')\r\n    this.fileInput.type = 'file'\r\n    this.fileInput.accept = 'application/json'\r\n    this.fileInput.addEventListener(\r\n      'change',\r\n      function (evt) {\r\n        var filename = evt.target.files[0].name\r\n        loadSrcFile(evt, true)\r\n          .then((fdata) => {\r\n            fdata.index = getThreadsList(fdata)\r\n            this._resetData(fdata, filename)\r\n          })\r\n          .catch((err) => {\r\n            logErr(err.message)\r\n            this._displayFeedback('Invalid source')\r\n          })\r\n        this.fileInput.value = ''\r\n      }.bind(this)\r\n    )\r\n    this.fileInput.style.display = 'none'\r\n  }\r\n\r\n  _setSaveBtn() {\r\n    this.saveBtn = getElm('A', 'nx-save')\r\n    this.saveBtn.append(iconImage(saveB64, 20))\r\n    this.toggleSaveBtn(true)\r\n    this.saveBtn.addEventListener(\r\n        'click',\r\n        function () {\r\n          if (!this.saveBtn.classList.contains('nx-disabled')) {\r\n            registerEditData(this.EditState.cacheName, this.EditState.state.srcData)\r\n            this._displayFeedback('saved')\r\n            this.toggleSaveBtn(true)\r\n            this._setResetStatus()\r\n          }\r\n        }.bind(this)\r\n      )\r\n  }\r\n\r\n  _setResetStatus() {\r\n    var disb = true\r\n    if (this.EditState.originData !== JSON.stringify(this.EditState.state.srcData)) {\r\n      disb = false\r\n    }\r\n    toggleDisabled(this.resetBtn, disb)\r\n  }\r\n\r\n  _setResetBtn() {\r\n    this.resetBtn = getElm('A', 'nx-reset')\r\n    this.resetBtn.append(iconImage(resetB64, 20))\r\n\r\n    this._setResetStatus()\r\n    this.resetBtn.addEventListener(\r\n      'click',\r\n      function () {\r\n        if (!this.resetBtn.classList.contains('nx-disabled')) {\r\n          this._resetData(JSON.parse(this.EditState.originData), this.EditState.originUrl)\r\n          toggleDisabled(this.resetBtn, true)\r\n        }\r\n      }.bind(this)\r\n    )\r\n  }\r\n\r\n  _setEditNav() {\r\n    this._setActionFeedback()\r\n    this._setResetBtn()\r\n    this._setNewDocumenBtn()\r\n    this._setOpenBtn()\r\n    this._setSaveBtn()\r\n    this._setDownloadBtn()\r\n\r\n    this.editLinks = getElm('DIV')\r\n    this.editLinks.append(this.resetBtn, this.newBtn, this.openWrap, this.saveBtn, this.dlBtn)\r\n    this.editNav = getElm('DIV', 'nx-edit-nav')\r\n    this.editNav.append(this.actionFdbck, this.editLinks)\r\n  }\r\n\r\n  _setEditActions() {\r\n    this.resetting = false\r\n    this.lastAction = { act: null }\r\n    this.actCtrls = {\r\n      ctrls: {\r\n        prev: { symbol: undoB64, elm: null },\r\n        next: { symbol: redoB64, elm: null },\r\n      },\r\n      position: 0,\r\n      count: 1,\r\n    }\r\n    this.editActions = getElm('DIV', 'nx-edit-actions nx-history-nav')\r\n    setHistoryControls(this.actCtrls, this._triggerUndoRedo.bind(this), true)\r\n    this.editActions.append(this.actCtrls.ctrls['prev'].elm, this.actCtrls.ctrls['next'].elm)\r\n  }\r\n\r\n  _triggerUndoRedo(ctrl) {\r\n    this.lastAction.act(ctrl === 'next')\r\n    this.toggleSaveBtn(false)\r\n  }\r\n\r\n  _setMenu() {\r\n    this._setEditNav()\r\n    this._setEditActions()\r\n    this.menu = getElm('DIV', 'nx-edit-menu')\r\n    this.menu.append(this.editNav, this.editActions)\r\n  }\r\n}\r\n","import { randomInt, randomString } from '@i-is-as-i-does/jack-js/src/modules/Help.js'\r\nimport { appUrl } from '@i-is-as-i-does/nexus-core/src/validt/NxSpecs.js'\r\n\r\nexport function newState(data, url = 'nexus.json', id = '/', idx = -1) {\r\n  return {\r\n    dataUrl: url,\r\n    srcData: data,\r\n    threadId: id,\r\n    threadIndex: idx,\r\n  }\r\n}\r\n\r\nexport function newData() {\r\n  var randomId = randomString(10)\r\n  return {\r\n    nexus: appUrl,\r\n    author: {\r\n      handle: 'Anonymous-' + randomInt(100, 999),\r\n      about: '',\r\n      url: 'http://',\r\n    },\r\n    threads: [newThread(randomId)],\r\n    index: [randomId],\r\n  }\r\n}\r\n\r\nexport function newThread(randomId) {\r\n  return {\r\n    id: randomId,\r\n    title: randomId,\r\n    description: '...',\r\n    content: {\r\n      timestamp: new Date().toISOString().substring(0, 16),\r\n      main: '...',\r\n      aside: '',\r\n      media: {\r\n        url: '',\r\n        type: '',\r\n        caption: '',\r\n      },\r\n    },\r\n    linked: [],\r\n  }\r\n}\r\n","import { randomString, replaceDiacritics } from '@i-is-as-i-does/jack-js/src/modules/Help'\r\nimport { getQuery } from '@i-is-as-i-does/nexus-core/src/base/NxHost'\r\nimport { getThreadsList } from '@i-is-as-i-does/nexus-core/src/load/NxSrc'\r\nimport { getStoredEditData, registerEditData } from '@i-is-as-i-does/nexus-core/src/storg/NxMemory'\r\nimport { getAltState } from '../shared/NxState'\r\nimport { newState, newData } from './NxEditStarters'\r\n\r\nexport class NxEditState {\r\n  constructor(state) {\r\n    var tag = 'new'\r\n    var url = 'nexus.json'\r\n    var useState = false\r\n\r\n    if (getQuery('edit')) {\r\n      tag = 'current'\r\n      if(state){\r\n        if(state.dataUrl){\r\n          url = state.dataUrl\r\n        }   \r\n        if(state.srcData){\r\n          useState = true\r\n        }\r\n      }   \r\n    }\r\n\r\n    this.cacheName = tag+\"#\"+url\r\n    this.originUrl = url\r\n    var data = getStoredEditData(this.cacheName)\r\n    var register = false\r\n\r\n    if(data === null){\r\n      register = true\r\n      if(useState){\r\n        data = state.srcData\r\n      } else {\r\n        data = newData()\r\n      }\r\n    }\r\n\r\n    if (!data.index) {\r\n      register = true\r\n      data.index = getThreadsList(data)\r\n    }\r\n    if(register){\r\n      registerEditData(this.cacheName, data)\r\n    }\r\n\r\n    var origin = data\r\n    if (useState) {\r\n      origin = state.srcData\r\n    }\r\n    this.originData = JSON.stringify(origin)\r\n\r\n    var id = '/'\r\n    var idx = -1\r\n    if(useState && state.threadId !== '/' && data.index.includes(state.threadId)){\r\n      id = state.threadId\r\n      idx = data.index.indexOf(state.threadId)\r\n    } else if(data.threads.length){\r\n      id = data.threads[0].id\r\n      idx = 0\r\n    }\r\n\r\n    this.state = newState(data, url, id, idx)\r\n    this.threadsMap = {} // @doc originIdx: { id: currentId, idx: currentIdx, linked :{}}\r\n  }\r\n\r\n  /* whole state methods */\r\n\r\n  getState() {\r\n    return this.state\r\n  }\r\n\r\n  getOriginData() {\r\n    return this.originData\r\n  }\r\n\r\n  getJsonState() {\r\n    return JSON.stringify(this.state)\r\n  }\r\n\r\n  getAltEditState(ident) {\r\n    return getAltState(this.state, this.getThreadId(ident), this.getThreadIdx(ident))\r\n  }\r\n\r\n  setNewState(jsonState) {\r\n    this.state = Object.assign({}, JSON.parse(jsonState))\r\n  }\r\n\r\n  /* form methods */\r\n\r\n  setAuthorValue(ref, value) {\r\n    if (!this.state.srcData.author) {\r\n      this.state.srcData.author = {}\r\n    }\r\n    this.state.srcData.author[ref[1]] = value\r\n  }\r\n\r\n  setThreadIndex(ident) {\r\n    if (!this.state.srcData.threads) {\r\n      this.state.srcData.threads = []\r\n    } else {\r\n      var idx = this.getThreadIdx(ident)\r\n      if (typeof this.state.srcData.threads[idx] === 'undefined') {\r\n        this.state.srcData.threads[idx] = {}\r\n      }\r\n    }\r\n  }\r\n\r\n  setThreadId(ref, value) {\r\n    this.threadsMap[ref[1]].id = value\r\n    var idx = this.getThreadIdx(ref[1])\r\n    this.state.srcData.index[idx] = value\r\n    this.state.srcData.threads[idx].id = value\r\n  }\r\n\r\n  setThreadInfo(ref, value) {\r\n    var idx = this.getThreadIdx(ref[1])\r\n    this.state.srcData.threads[idx][ref[2]] = value\r\n  }\r\n\r\n  setContentValue(ref, value) {\r\n    var idx = this.getThreadIdx(ref[1])\r\n    if (!this.state.srcData.threads[idx].content) {\r\n      this.state.srcData.threads[idx].content = {}\r\n    }\r\n    if (ref[3] !== 'media') {\r\n      this.state.srcData.threads[idx].content[ref[3]] = value\r\n      return\r\n    }\r\n    if (!this.state.srcData.threads[idx].content.media) {\r\n      this.state.srcData.threads[idx].content.media = {}\r\n    }\r\n    this.state.srcData.threads[idx].content.media[ref[4]] = value\r\n  }\r\n\r\n  setLinkedValue(ref, value) {\r\n    var idx = this.getThreadIdx(ref[1])\r\n    if (!this.state.srcData.threads[idx].linked) {\r\n      this.state.srcData.threads[idx].linked = [value]\r\n    } else {\r\n      var lidx = this.getLinkedThreadIdx(ref[1], ref[3])\r\n      this.state.srcData.threads[idx].linked[lidx] = value\r\n    }\r\n  }\r\n\r\n  setNewValue(ref, value) {\r\n    if (this.state.srcData === null) {\r\n      this.state.srcData = {}\r\n      this.state.srcData.index = []\r\n    }\r\n    if (ref[0] === 'author') {\r\n      return this.setAuthorValue(ref, value)\r\n    }\r\n    this.setThreadIndex(ref[1])\r\n\r\n    if (ref[2] === 'id') {\r\n      return this.setThreadId(ref, value)\r\n    }\r\n    if (!['linked', 'content'].includes(ref[2])) {\r\n      return this.setThreadInfo(ref, value)\r\n    }\r\n\r\n    if (ref[2] === 'content') {\r\n      return this.setContentValue(ref, value)\r\n    }\r\n    this.setLinkedValue(ref, value)\r\n  }\r\n\r\n  getValue(ref) {\r\n    if (this.state.srcData) {\r\n      if (ref[0] === 'author') {\r\n        return this.state.srcData.author[ref[1]]\r\n      }\r\n      var idx = this.getThreadIdx(ref[1])\r\n      if (!['linked', 'content'].includes(ref[2])) {\r\n        return this.state.srcData.threads[idx][ref[2]]\r\n      }\r\n      if (ref[2] === 'content') {\r\n        if (ref[3] !== 'media') {\r\n          return this.state.srcData.threads[idx].content[ref[3]]\r\n        }\r\n        return this.state.srcData.threads[idx].content.media[ref[4]]\r\n      }\r\n      var lidx = this.getLinkedThreadIdx(ref[1], ref[3])\r\n      return this.state.srcData.threads[idx].linked[lidx]\r\n    }\r\n    return ''\r\n  }\r\n\r\n  /* state infos methods */\r\n\r\n  getThreadId(ident) {\r\n    return this.threadsMap[ident].id\r\n  }\r\n\r\n  getThreadIdx(ident) {\r\n    var idx = this.threadsMap[ident].idx\r\n    var count = this.getThreadsCount()\r\n    if (idx >= count) {\r\n      idx = count - 1\r\n      this.threadsMap[ident].idx = idx\r\n      if (this.isCurrentId(ident)) {\r\n        this.state.threadIndex = idx\r\n      }\r\n    }\r\n    return idx\r\n  }\r\n\r\n  getIdsList() {\r\n    return this.state.srcData.index\r\n  }\r\n\r\n  getThreadsCount() {\r\n    return this.state.srcData.index.length\r\n  }\r\n\r\n  getCurrentThreadId() {\r\n    return this.state.threadId\r\n  }\r\n\r\n  getCurrentThreadIdx() {\r\n    return this.state.threadIndex\r\n  }\r\n\r\n  isCurrentId(ident) {\r\n    return this.threadsMap[ident].id === this.state.threadId\r\n  }\r\n\r\n  resolveFilename(){\r\n    var filename = 'nexus.json'\r\n    if(this.state.dataUrl && this.state.dataUrl !== filename){\r\n      var sp = this.state.dataUrl.split('/').filter(it => it)\r\n      if(sp.length){\r\n        filename = sp.pop()\r\n        if(filename.slice(-5) !== '.json'){\r\n          filename += '.json'\r\n        }\r\n        filename = replaceDiacritics(filename)\r\n      }\r\n    }\r\n    return filename\r\n  }\r\n\r\n\r\n  /* specific thread methods */\r\n\r\n  unsetCurrentThread() {\r\n    this.state.threadId = '/'\r\n    this.state.threadIndex = -1\r\n  }\r\n\r\n  isFirstThread(ident) {\r\n    return this.getThreadIdx(ident) === 0\r\n  }\r\n\r\n  isLastThread(ident) {\r\n    return this.getThreadIdx(ident) + 1 === this.getThreadsCount()\r\n  }\r\n\r\n  getThreadData(ident) {\r\n    var idx = this.getThreadIdx(ident)\r\n    var threadData = this.state.srcData.threads[idx]\r\n    if (!threadData) {\r\n      this.state.srcData.threads[idx] = {}\r\n    }\r\n    return threadData\r\n  }\r\n\r\n  removeThread(ident) {\r\n    var idx = this.getThreadIdx(ident)\r\n    this.state.srcData.index.splice(idx, 1)\r\n    this.state.srcData.threads.splice(idx, 1)\r\n\r\n    if (!this.isLastThread(ident)) {\r\n      for (let [k, v] of Object.entries(this.threadsMap)) {\r\n        if (v.idx > idx) {\r\n          this.threadsMap[k].idx = v.idx - 1\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.isCurrentId(ident)) {\r\n      this.unsetCurrentThread()\r\n    } else if (this.state.threadIndex > idx) {\r\n      this.state.threadIndex--\r\n    }\r\n  }\r\n\r\n  insertThread(ident, threadData) {\r\n    if (this.isLastThread(ident)) {\r\n      this.pushThread(threadData)\r\n    } else {\r\n      var idx = this.getThreadIdx(ident)\r\n      this.state.srcData.index.splice(idx, 0, threadData.id)\r\n      this.state.srcData.threads.splice(idx, 0, threadData)\r\n      for (let [k, v] of Object.entries(this.threadsMap)) {\r\n        if (v.id !== threadData.id && v.idx >= idx) {\r\n          this.threadsMap[k].idx = v.idx + 1\r\n        }\r\n      }\r\n      if (this.state.threadIndex >= idx) {\r\n        this.state.threadIndex++\r\n      }\r\n    }\r\n  }\r\n\r\n  newIdent(id, idx) {\r\n    var ident = randomString(21)\r\n    this.threadsMap[ident] = { id: id, idx: idx, linked: {} }\r\n    return ident\r\n  }\r\n\r\n  changeCurrentThread(ident) {\r\n    this.state.threadId = this.getThreadId(ident)\r\n    this.state.threadIndex = this.getThreadIdx(ident)\r\n  }\r\n\r\n  moveThread(ident, siblingIdent, up = false) {\r\n    var from = this.getThreadIdx(ident)\r\n    var to = from + 1\r\n    if (up) {\r\n      to = from - 1\r\n    }\r\n    this.state.srcData.index.splice(to, 0, this.state.srcData.index.splice(from, 1)[0])\r\n    this.state.srcData.threads.splice(to, 0, this.state.srcData.threads.splice(from, 1)[0])\r\n    this.threadsMap[ident].idx = to\r\n    this.threadsMap[siblingIdent].idx = from\r\n\r\n    if (this.isCurrentId(ident)) {\r\n      this.state.threadIndex = to\r\n    } else if (this.isCurrentId(siblingIdent)) {\r\n      this.state.threadIndex = from\r\n    }\r\n  }\r\n\r\n  pushThread(threadData) {\r\n    this.state.srcData.threads.push(threadData)\r\n    this.state.srcData.index.push(threadData.id)\r\n  }\r\n\r\n  /* linked threads methods */\r\n\r\n  getLinkedThreadIdx(ident, lkident) {\r\n    var idx = this.threadsMap[ident].linked[lkident].idx\r\n    var count = this.getLinkedUrlsCount(ident)\r\n    if (idx >= count) {\r\n      idx = count - 1\r\n      this.threadsMap[ident].linked[lkident].idx = idx\r\n    }\r\n    return idx\r\n  }\r\n\r\n  getLinkedUrls(ident) {\r\n    var threadData = this.getThreadData(ident)\r\n    if (!Object.prototype.hasOwnProperty.call(threadData, 'linked')) {\r\n      var idx = this.getThreadIdx(ident)\r\n      this.state.srcData.threads[idx].linked = []\r\n      return []\r\n    }\r\n    return threadData.linked\r\n  }\r\n\r\n  getLinkedUrlsCount(ident) {\r\n    return this.getLinkedUrls(ident).length\r\n  }\r\n\r\n  registerLinkedThread(ident, linkIdx) {\r\n    var lkident = randomString(21)\r\n    this.threadsMap[ident].linked[lkident] = { idx: linkIdx }\r\n    return lkident\r\n  }\r\n\r\n  isLastLinkedThread(ident, lkident) {\r\n    return this.getLinkedThreadIdx(ident, lkident) === this.getLinkedUrlsCount(ident) - 1\r\n  }\r\n\r\n  removeLinkedThread(ident, lkident) {\r\n    var tidx = this.getThreadIdx(ident)\r\n    var lidx = this.getLinkedThreadIdx(ident, lkident)\r\n    if (lidx === this.getLinkedUrlsCount(ident) - 1) {\r\n      this.state.srcData.threads[tidx].linked.pop()\r\n    } else {\r\n      this.state.srcData.threads[tidx].linked.splice(lidx, 1)\r\n      for (let [k, v] of Object.entries(this.threadsMap[ident].linked)) {\r\n        if (v.idx > lidx) {\r\n          this.threadsMap[ident].linked[k].idx = v.idx - 1\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  pushLinkedThread(ident, value) {\r\n    var idx = this.getThreadIdx(ident)\r\n    if(!this.state.srcData.threads[idx].linked){\r\n      this.state.srcData.threads[idx].linked = []\r\n    }\r\n      this.state.srcData.threads[idx].linked.push(value)\r\n  }\r\n\r\n  insertLinkedThread(ident, lkident, value) {\r\n    if (this.isLastLinkedThread(ident, lkident)) {\r\n      this.pushLinkedThread(ident, value)\r\n    } else {\r\n      var tidx = this.getThreadIdx(ident)\r\n      var lidx = this.getLinkedThreadIdx(ident, lkident)\r\n      this.state.srcData.threads[tidx].linked.splice(lidx, 0, value)\r\n      for (let [k, v] of Object.entries(this.threadsMap[ident].linked)) {\r\n        if (v.idx >= lidx && k !== lkident) {\r\n          this.threadsMap[ident].linked[k].idx = v.idx + 1\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { vShow, vHide } from '@i-is-as-i-does/valva/src/modules/transitions.js'\r\nimport { getElm, iconImage } from '../shared/NxCommons.js'\r\nimport { editB64, previewB64 } from '../shared/NxIcons.js'\r\n\r\nexport class NxEditSwitch {\r\n  constructor(editInst, readerInst, readerUpdatePromise) {\r\n    this.editInst = editInst\r\n    this.readerInst = readerInst\r\n\r\n    this.readerUpdatePromise = readerUpdatePromise\r\n\r\n    this.previewOn = false\r\n    this._setSwitchBtn()\r\n  }\r\n\r\n  getSwitchBtn() {\r\n    return this.switchBtn\r\n  }\r\n\r\n  _instanceSwitch() {\r\n    this.previewOn = !this.previewOn\r\n\r\n    if (this.previewOn) {\r\n      vHide(this.editInst, 'fade', 200,  function () {\r\n        this.readerUpdatePromise().then(()=> {\r\n          this.switchBtn.firstChild.src = editB64\r\n          vShow(this.readerInst, 'fade', 200)\r\n        })\r\n      }.bind(this))\r\n    } else {\r\n      vHide(this.readerInst, 'fade', 200,  function () {\r\n        this.switchBtn.firstChild.src = previewB64\r\n        vShow(this.editInst, 'fade', 200)\r\n      }.bind(this))\r\n    }\r\n  }\r\n\r\n  _setSwitchBtn() {\r\n    this.switchBtn = getElm('A', 'nx-edit-switch')\r\n    this.switchBtn.append(iconImage(previewB64, 25))\r\n\r\n    this.switchBtn.addEventListener('click', this._instanceSwitch.bind(this))\r\n  }\r\n}\r\n","import { readerElms } from '../reader/NxReader.js'\r\nimport { getElm } from '../shared/NxCommons.js'\r\nimport { NxEditInstance } from './NxEditInstance.js'\r\nimport { NxEditSwitch } from './NxEditSwitch.js'\r\nimport { triggerUpdate } from '../shared/NxState.js'\r\nimport { NxEditState } from './NxEditState.js'\r\n\r\nexport function editorElms(seed) {\r\n  var EditState = new NxEditState(seed.state)\r\n  var EditInstance = new NxEditInstance(EditState)\r\n\r\n  var editInst = EditInstance.getInstanceElms()\r\n\r\n  var readerSeed = {\r\n    editMode: true,\r\n    state: Object.assign({}, EditState.getState()),\r\n  }\r\n  var readerInst = readerElms(readerSeed)\r\n  readerInst.style.display = 'none'\r\n\r\n  var readerUpdatePromise = function () {\r\n   triggerUpdate(EditState.state, true, true)\r\n   return new Promise(function(resolve) {\r\n    setTimeout(resolve, 100);\r\n})\r\n  }\r\n  var EditSwitch = new NxEditSwitch(editInst, readerInst, readerUpdatePromise)\r\n  var switchBtn = EditSwitch.getSwitchBtn()\r\n\r\n  var editor = getElm('DIV', 'nx-editor')\r\n  editor.append(editInst, readerInst, switchBtn)\r\n\r\n  return editor\r\n}\r\n","import { getSrcData } from '@i-is-as-i-does/nexus-core/src/load/NxSrc'\r\nimport { getTxt } from '@i-is-as-i-does/nexus-core/src/transl/NxCoreTranslate'\r\nimport { registerTranslElm } from '@i-is-as-i-does/nexus-core/src/transl/NxElmTranslate'\r\nimport {\r\n  charMinMax,\r\n  idPattern,\r\n  supportedMediaTypes,\r\n  urlPattern,\r\n} from '@i-is-as-i-does/nexus-core/src/validt/NxSpecs'\r\nimport { isValidUrl } from '@i-is-as-i-does/nexus-core/src/validt/NxStamper'\r\nimport { getElm, iconImage, selectDropDown } from '../shared/NxCommons'\r\nimport { invalidB64, validB64 } from '../shared/NxIcons'\r\nimport { isUnique, uniqueId } from './NxEditCommons'\r\n\r\nexport class NxInputsFactory {\r\n  constructor(EditState, EditMenu) {\r\n    this.EditState = EditState\r\n    this.EditMenu = EditMenu\r\n  }\r\n\r\n  inputElm(ref, callback = null, store = null) {\r\n    var idents = this._fieldIdents(ref)\r\n    var inp = this._resolveInput(idents, ref)\r\n\r\n    var lb = this._baseLabel(idents.alias)\r\n    var indc = getElm('SPAN', 'nx-edit-indication')\r\n    var fdbck = this._invalidSp()\r\n    lb.append(indc, fdbck)\r\n    this._setConditions(idents, inp, indc)\r\n\r\n    if (store) {\r\n      store[idents.field] = inp\r\n    }\r\n    var wrap = this._wrapInput(idents, inp, lb)\r\n\r\n    this._setInputEvt(ref, inp, fdbck, callback)\r\n    this._inputEvtHandler(ref, inp, fdbck, callback)\r\n\r\n    return wrap\r\n  }\r\n\r\n  _setConditions(idents, inp, indc) {\r\n    switch (idents.field) {\r\n      case 'url':\r\n        indc.textContent = '[http]'\r\n        inp.pattern = urlPattern\r\n        break\r\n      case 'linked':\r\n        indc.textContent = '[http]'\r\n        inp.pattern = urlPattern\r\n        break\r\n      case 'id':\r\n        indc.textContent = '[A-Za-z0-9-][3-36]'\r\n        inp.pattern = idPattern\r\n        break\r\n      case 'type':\r\n        inp.pattern = '(' + supportedMediaTypes.join('|') + ')'\r\n        break\r\n      case 'timestamp':\r\n        break\r\n      default:\r\n        var minmax = charMinMax[idents.field]\r\n        indc.textContent = '[' + minmax[0] + '-' + minmax[1] + ']'\r\n        inp.setAttribute('maxlength', minmax[1])\r\n        inp.setAttribute('minlength', minmax[0])\r\n    }\r\n  }\r\n\r\n  _wrapInput(idents, inp, lb) {\r\n    var wrap = getElm('DIV', 'nx-edit-input nx-edit-' + idents.parent + '-' + idents.field)\r\n    wrap.append(lb)\r\n    if (idents.field === 'type') {\r\n      wrap.append(this._typeDropDown(inp))\r\n    } else {\r\n      wrap.append(inp)\r\n    }\r\n    return wrap\r\n  }\r\n\r\n  _typeDropDown(inp) {\r\n    var items = supportedMediaTypes\r\n    return selectDropDown(items, inp, null, 'nx-edit-media-type-select')\r\n  }\r\n\r\n  _fieldIdents(ref) {\r\n    var idents = {}\r\n    var pos = ref.length - 1\r\n    if (ref[pos - 1] === 'linked') {\r\n      pos--\r\n    }\r\n    idents.field = ref[pos]\r\n    pos--\r\n    if (ref[pos - 1] === 'threads') {\r\n      pos--\r\n    }\r\n    idents.parent = ref[pos]\r\n    idents.alias = idents.field\r\n    if (idents.field === 'linked') {\r\n      idents.alias = 'url'\r\n    }\r\n    return idents\r\n  }\r\n\r\n  _isLongTextInput(idents) {\r\n    return ['about', 'description', 'main', 'aside', 'caption'].includes(idents.field)\r\n  }\r\n\r\n  _isRequired(idents) {\r\n    return ['handle', 'title', 'main', 'id', 'url', 'type', 'timestamp', 'linked'].includes(\r\n      idents.field\r\n    )\r\n  }\r\n\r\n  _resolveInput(idents, ref) {\r\n    var val = this.EditState.getValue(ref)\r\n    var inp\r\n    if (this._isLongTextInput(idents)) {\r\n      inp = this._textareaInput(val)\r\n    } else if (idents.field == 'timestamp') {\r\n      inp = this._dateInput(val)\r\n    } else {\r\n      inp = this._textInput(val)\r\n    }\r\n    inp.classList.add('nx-edit-input')\r\n\r\n    var hook = ref.join('-')\r\n    inp.id = hook\r\n    inp.name = hook\r\n    if (this._isRequired(idents)) {\r\n      inp.required = true\r\n    }\r\n    return inp\r\n  }\r\n\r\n  _textInput(val) {\r\n    var inp = getElm('INPUT', 'nx-edit-text')\r\n    inp.type = 'text'\r\n    inp.value = val\r\n    return inp\r\n  }\r\n\r\n  _textareaInput(val) {\r\n    var inp = getElm('TEXTAREA', 'nx-edit-textarea')\r\n    inp.textContent = val\r\n    return inp\r\n  }\r\n  _dateInput(val) {\r\n    var inp = getElm('INPUT', 'nx-edit-date')\r\n    inp.type = 'datetime-local'\r\n    inp.value = val\r\n    return inp\r\n  }\r\n\r\n  _baseLabel(field) {\r\n    var lb = getElm('LABEL', 'nx-edit-label')\r\n    lb.for = field\r\n    var title = getElm('SPAN', 'nx-edit-title')\r\n    title.textContent = getTxt(field)\r\n    registerTranslElm(title, field)\r\n    lb.append(title)\r\n    return lb\r\n  }\r\n\r\n  _invalidSp() {\r\n    var sp = getElm('SPAN', 'nx-edit-feedback')\r\n    sp.append(iconImage(invalidB64))\r\n    return sp\r\n  }\r\n\r\n  _inputEvtHandler(ref, inp, fdbck, callback) {\r\n    var valid = inp.checkValidity()\r\n    var validPromise = null\r\n\r\n    if ((valid && ref.includes('url')) || ref.includes('linked')) {\r\n      valid = isValidUrl(inp.value)\r\n      if (valid && ref.includes('linked')) {\r\n        valid = isUnique(\r\n          this.EditState.getLinkedUrls(ref[1]),\r\n          inp.value,\r\n          this.EditState.getLinkedThreadIdx(ref[1], ref[3])\r\n        )\r\n        if (valid) {\r\n          validPromise = getSrcData(inp.value)\r\n            .then(() => {\r\n              return true\r\n            })\r\n            .catch(() => {\r\n              return false\r\n            })\r\n        }\r\n      }\r\n    } else if (ref.includes('id')) {\r\n      var nId = uniqueId(\r\n        this.EditState.getIdsList(),\r\n        inp.value,\r\n        this.EditState.getThreadIdx(ref[1])\r\n      )\r\n      if (nId !== inp.value) {\r\n        inp.value = nId\r\n      }\r\n      valid = true\r\n    }\r\n\r\n    if (validPromise === null) {\r\n      validPromise = Promise.resolve(valid)\r\n    }\r\n\r\n    validPromise.then((isValid) => {\r\n      this.EditState.setNewValue(ref, inp.value)\r\n      this._setFeedbackIcon(fdbck, isValid)\r\n      \r\n      if (typeof callback === 'function') {\r\n        callback(inp, isValid)\r\n      }\r\n    })\r\n  }\r\n\r\n  _setFeedbackIcon(fdbck, valid) {\r\n    var icsrc = invalidB64\r\n    if (valid) {\r\n      icsrc = validB64\r\n    }\r\n    fdbck.firstChild.src = icsrc\r\n  }\r\n\r\n  _setInputEvt(ref, inp, fdbck, callback) {\r\n    var undone = ''\r\n    var prev = inp.value\r\n    inp.addEventListener('focus', function () {\r\n      prev = inp.value\r\n    })\r\n    inp.addEventListener('AutoUpdate', function () {\r\n      this._inputEvtHandler(ref, inp, fdbck, callback)\r\n    }.bind(this))\r\n    inp.addEventListener(\r\n      'change',\r\n      function () {\r\n        this._inputEvtHandler(ref, inp, fdbck, callback)\r\n          var act = function (redo) {\r\n            if (redo) {\r\n              inp.value = undone\r\n            } else {\r\n              undone = inp.value\r\n              inp.value = prev\r\n            }\r\n            this._inputEvtHandler(ref, inp, fdbck, callback)\r\n          }.bind(this)\r\n          this.EditMenu.setLastAction(act)\r\n      }.bind(this)\r\n    )\r\n  }\r\n}\r\n","import { getElm, landmarkElm } from '../shared/NxCommons'\r\nimport { autoUpdateEvt, resolveMediaType } from './NxEditCommons'\r\n\r\nexport class NxLocalFormFactory {\r\n  constructor(InputsFactory) {\r\n    this.InputsFactory = InputsFactory\r\n  }\r\n\r\n  newThreadLocalForm(ident, indexElm) {\r\n    var form = getElm('FORM', 'nx-thread-local-form')\r\n    var fieldset1 = this._localFieldSet1(ident, indexElm)\r\n    var fieldset2 = this._localFieldSet2(ident)\r\n    var fieldset3 = this._localFieldSet3(ident)\r\n\r\n    form.append(\r\n      landmarkElm('local thread'),\r\n      fieldset1,\r\n      landmarkElm('content'),\r\n      fieldset2,\r\n      landmarkElm('media'),\r\n      fieldset3\r\n    )\r\n    return form\r\n  }\r\n\r\n  _localFieldSet1(ident, indexElm) {\r\n    var fieldset1 = getElm('FIELDSET')\r\n\r\n    var titleCallback = function (inp) {\r\n      var targ = indexElm.querySelector('.nx-thread-title')\r\n      if (targ.textContent !== inp.value) {\r\n        targ.textContent = inp.value\r\n      }\r\n    }\r\n    fieldset1.append(this.InputsFactory.inputElm(['threads', ident, 'id']))\r\n    fieldset1.append(this.InputsFactory.inputElm(['threads', ident, 'title'], titleCallback))\r\n    fieldset1.append(this.InputsFactory.inputElm(['threads', ident, 'description']))\r\n    return fieldset1\r\n  }\r\n\r\n  _localFieldSet2(ident) {\r\n    var fieldset2 = getElm('FIELDSET')\r\n    var fields = ['timestamp', 'main', 'aside']\r\n    fields.forEach((field) => {\r\n      fieldset2.append(this.InputsFactory.inputElm(['threads', ident, 'content', field]))\r\n    })\r\n    return fieldset2\r\n  }\r\n\r\n  _localFieldSet3(ident) {\r\n    var fieldset3 = getElm('FIELDSET')\r\n\r\n    var store = { type:null }\r\n    var typeInp = this.InputsFactory.inputElm(['threads', ident, 'content', 'media', 'type'], null, store)\r\n    var typeCallback = function (inp, valid) {\r\n      if (valid) {\r\n        var guessedType = resolveMediaType(inp.value)\r\n        if(store.type.value !== guessedType){\r\n          store.type.value = guessedType\r\n          var prev = typeInp.querySelector('.nx-selected')\r\n          if(prev){\r\n            prev.classList.remove('nx-selected')\r\n          }\r\n          typeInp.querySelector('[data-item=' + guessedType + ']').classList.add('nx-selected')\r\n          store.type.dispatchEvent(autoUpdateEvt)\r\n        }\r\n      }\r\n    }.bind(this)\r\n    fieldset3.append(\r\n      this.InputsFactory.inputElm(['threads', ident, 'content', 'media', 'url'], typeCallback)\r\n    )\r\n    fieldset3.append(typeInp)\r\n    fieldset3.append(this.InputsFactory.inputElm(['threads', ident, 'content', 'media', 'caption']))\r\n    return fieldset3\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":""}